-- phpMyAdmin SQL Dump
-- version 4.6.6deb5
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Jan 29, 2020 at 10:45 PM
-- Server version: 5.7.29-0ubuntu0.18.04.1
-- PHP Version: 7.2.24-0ubuntu0.18.04.2

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `pocketcards`
--

-- --------------------------------------------------------

--
-- Table structure for table `cards`
--

CREATE TABLE `cards` (
  `ID` bigint(20) NOT NULL,
  `topicID` bigint(20) NOT NULL,
  `frontText` text NOT NULL,
  `backText` text NOT NULL,
  `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `cards`
--

INSERT INTO `cards` (`ID`, `topicID`, `frontText`, `backText`, `created`, `updated`) VALUES
(338, 311, 'he doesnt drink', 'sodaaa', '2018-12-26 21:50:21', '2018-12-29 01:46:15'),
(339, 311, 'he asks', 'so any questions', '2018-12-26 21:50:27', '2018-12-26 21:50:27'),
(340, 311, 'he keeps bothering', 'tiffany', '2018-12-26 21:50:34', '2018-12-26 21:50:34'),
(341, 311, 'even though', 'she finishes her work in one sec', '2018-12-26 21:50:45', '2018-12-26 21:50:45'),
(342, 311, 'brandon', 'never does css', '2018-12-26 21:50:52', '2018-12-26 21:50:52'),
(363, 316, 'fsfdsfsdf', 'sdfsfsdf', '2018-12-28 01:58:18', '2018-12-28 01:58:18'),
(364, 316, 'fsfsdfsdf', 'sdfsfsd', '2018-12-28 01:58:20', '2018-12-28 01:58:20'),
(397, 328, 'asdf', 'asdf', '2018-12-29 00:10:34', '2018-12-29 00:10:34'),
(398, 332, 'dfsdf', 'sfsdf', '2018-12-29 03:27:56', '2018-12-29 03:27:56'),
(399, 332, 'sfsdf', 'sfsdf', '2018-12-29 03:27:59', '2018-12-29 03:27:59'),
(400, 335, 'What is event bubbling?', 'Event bubbling describes how an event is triggered on a DOM element (like a button) and is passed up to the DOM, triggering any event listeners.', '2018-12-29 21:11:19', '2018-12-29 21:11:19'),
(401, 335, 'What is Hoisting?', 'Hoisting describes how variables declared with the var keyword will have their declaration \"moved\" up to the top of the current scope.  Only the declaration is hoisted, the assignment will stay where it is.', '2018-12-29 21:45:19', '2018-12-29 21:45:19'),
(402, 335, '[...] is a technique of handling events at a higher level in the DOM than where the event originated.', 'Event delegation is a technique of handling events at a higher level in the DOM than where the element where they originated.  Event listeners are added to a parent element and will be triggered due to the event propagating up the DOM.', '2018-12-29 21:46:15', '2018-12-29 21:46:15'),
(404, 335, 'When would you use a closure?', 'Closures are commonly used for data privacy /emulating private methods, and partial applications or currying.', '2018-12-29 21:48:14', '2018-12-29 21:48:14'),
(408, 335, 'What is Ajax?', 'Ajax is a web technology that allows applications to send data to and retrieve from a server without interfering with the behavior of the current page.  It stands for Asynchronous JavaScript and XML.', '2019-01-04 00:39:12', '2019-01-04 00:39:12'),
(409, 335, 'What is a closure?', ' Closures are functions that have access to the outer (enclosing) function\'s variables—scope chain even after the outer function has returned.', '2019-01-04 00:40:13', '2019-01-04 00:40:13'),
(410, 335, 'What is the difference between a .forEach loop and a .map() loop? When you would use one versus the other?', 'The .map() function returns a new array, while .forEach() does not.  If you need the result, but do not wish to mutate the original array, .map() is the clear choice. If you simply need to iterate over an array, .forEach() is a fine choice.', '2019-01-04 00:40:36', '2019-01-04 00:40:36'),
(411, 335, 'What is a higher-order function?', 'A higher-order function is any function that takes one or more functions as arguments, which it uses to operate on some data, and returns a function as a result.  Higher-order functions are meant to abstract some operation that is performed repeatedly.', '2019-01-04 00:40:58', '2019-01-04 00:40:58'),
(412, 335, 'What are Promises?', 'Promises allows asynchronous methods return values like synchronous methods and are typically used for writing asynchronous programs (network requests, I/O).  A pending promise can either be fulfilled with a value, or rejected with a reason (error).', '2019-01-04 00:41:45', '2019-01-04 00:41:45'),
(413, 335, 'array.splice(start, deleteCount, item…)', 'Removes elements from an array, replacing them with new items, starting at the start index and deletes the given number.', '2019-01-04 00:42:26', '2019-01-04 00:42:26'),
(414, 335, 'object.hasOwnProperty(name)', 'Returns true if an object contains a property having the name', '2019-01-04 00:42:54', '2019-01-04 00:42:54'),
(415, 335, 'string.split(separator, limit)', 'Creates an array of strings by splitting this string into pieces.', '2019-01-04 00:43:12', '2019-01-04 00:43:12'),
(416, 335, 'string.substring(start, end)', ' Makes a new string by copying a portion of another string.', '2019-01-04 00:43:37', '2019-01-04 00:43:37'),
(417, 335, 'A [...] is a function passed into another function as an argument to be invoked later.', 'A callback function is a function passed into another function as an argument to be invoked later.', '2019-01-04 00:44:53', '2019-01-04 00:44:53'),
(418, 335, 'a', 'a', '2019-01-04 02:32:01', '2019-01-04 02:32:01'),
(419, 335, 'b', 'b', '2019-01-04 02:32:02', '2019-01-04 02:32:02'),
(420, 335, 'c', 'c', '2019-01-04 02:32:05', '2019-01-04 02:32:05'),
(421, 335, 'd', 'd', '2019-01-04 02:32:07', '2019-01-04 02:32:07'),
(422, 335, 'e', 'e', '2019-01-04 02:32:10', '2019-01-04 02:32:10'),
(423, 335, 'f', 'f', '2019-01-04 02:32:12', '2019-01-04 02:32:12'),
(424, 335, 'g', 'g', '2019-01-04 02:32:17', '2019-01-04 02:32:17'),
(425, 362, 'blue jay', 'a bird that is of blue color', '2019-01-05 09:47:01', '2019-01-05 09:47:01'),
(427, 311, '1212', '1312321', '2019-01-06 00:22:15', '2019-01-06 00:22:15'),
(428, 311, '123123', '213213', '2019-01-06 00:22:18', '2019-01-06 00:22:18'),
(429, 311, '123123', '13123', '2019-01-06 00:22:22', '2019-01-06 00:22:22'),
(430, 311, '12313', '12313', '2019-01-06 00:22:24', '2019-01-06 00:22:24'),
(431, 311, '131231', '13213', '2019-01-06 00:22:27', '2019-01-06 00:22:27'),
(432, 311, '123213', '123213', '2019-01-06 00:22:30', '2019-01-06 00:22:30'),
(433, 311, '123123', '123123', '2019-01-06 00:22:33', '2019-01-06 00:22:33'),
(434, 311, '123123', '123132', '2019-01-06 00:22:35', '2019-01-06 00:22:35'),
(435, 311, '123123', '123123', '2019-01-06 00:22:37', '2019-01-06 00:22:37'),
(436, 369, 'rabbit', 'rabbit 1', '2019-01-06 01:12:11', '2019-01-06 01:12:11'),
(437, 370, 'new card', 'new back card', '2019-01-06 01:37:29', '2019-01-06 01:37:29'),
(439, 374, 'abc', 'def', '2019-01-08 20:59:58', '2019-01-08 20:59:58'),
(440, 375, 'jflaksjfds', 'fjdlkasjfdlksafja', '2019-01-08 21:01:47', '2019-01-08 21:01:47'),
(441, 375, 'banana', 'apple', '2019-01-08 21:02:46', '2019-01-08 21:02:46'),
(442, 376, 'dogs', 'men\'s best friend', '2019-01-08 21:03:24', '2019-01-08 21:03:24'),
(447, 378, 'he likes', 'lady bugs', '2019-01-08 21:17:12', '2019-01-08 21:17:12'),
(448, 378, 'he wears', 'glasses', '2019-01-08 21:17:20', '2019-01-08 21:17:20'),
(449, 378, 'brandon park', 'breaks code', '2019-01-08 21:17:25', '2019-01-08 21:17:25'),
(450, 378, 'brandon bosses', 'vienna around', '2019-01-08 21:17:36', '2019-01-08 21:17:36'),
(451, 378, 'brandon cant', 'do infinite scroll', '2019-01-08 21:17:51', '2019-01-08 21:17:51'),
(455, 383, 'fishfood', 'tuna', '2019-01-08 21:20:28', '2019-01-08 21:20:28'),
(456, 384, 'Apple', 'Apple card', '2019-01-08 21:26:06', '2019-01-08 21:26:06'),
(457, 312, 'adasd', 'adasd', '2019-01-08 21:26:22', '2019-01-08 21:26:22'),
(458, 345, 'he is very bad', 'at coding', '2019-01-08 21:40:06', '2019-01-08 21:40:06'),
(459, 346, 'brandon is bad', 'at coding', '2019-01-08 21:40:54', '2019-01-08 21:40:54'),
(460, 385, 'lsjadfkasj', 'alkdsflsdkj', '2019-01-08 21:46:50', '2019-01-08 21:46:50'),
(461, 386, 'errors', 'errors', '2019-01-08 21:48:50', '2019-01-08 21:48:50'),
(462, 312, 'adslfkjdlsa', 'alsjdflksdjflksadj', '2019-01-08 23:00:36', '2019-01-08 23:00:36'),
(463, 312, 'asldkfjlksdjfl', 'jfalskdfjlsdkjflsa', '2019-01-08 23:00:38', '2019-01-08 23:00:38'),
(464, 312, 'asldfjsdlkfjlsdak', 'lkasjfl;sdkajf;', '2019-01-08 23:00:41', '2019-01-08 23:00:41'),
(465, 312, 'aslfjsdlkjflkasjdf', 'jdsklfjsdlkjfsldakjf', '2019-01-08 23:00:44', '2019-01-08 23:00:44'),
(466, 312, 'asdlkfjlsdakjflsdk', 'aslkfdjsdljf', '2019-01-08 23:00:48', '2019-01-08 23:00:48'),
(467, 312, 'asdkfjlksdjfkl', 'alskdjflksdafma', '2019-01-08 23:00:51', '2019-01-08 23:00:51'),
(468, 312, 'asdfjlsdkafmlsa', 'jfadslkfmsdlkf', '2019-01-08 23:00:55', '2019-01-08 23:00:55'),
(469, 312, 'aaalskjdflksdja', 'alksdjflkasjfdlka', '2019-01-08 23:00:59', '2019-01-08 23:00:59'),
(470, 312, 'asldfjklsajdf', 'aslkdfjlsdjkf', '2019-01-08 23:01:03', '2019-01-08 23:01:03'),
(471, 312, 'aslkdjflksadjf', 'alkjsdflkasklfdmf', '2019-01-08 23:01:06', '2019-01-08 23:01:06'),
(472, 345, 'asldkfjsadlk', 'lkjafsdklfmsadlkf', '2019-01-08 23:01:21', '2019-01-08 23:01:21'),
(473, 345, 'kjhdvlaskjlfj', 'aslkdfnlksdjf', '2019-01-08 23:01:25', '2019-01-08 23:01:25'),
(478, 312, '12th card', '12th card', '2019-01-11 22:03:39', '2019-01-11 22:03:39'),
(479, 312, '13th ', '13th card', '2019-01-11 22:05:12', '2019-01-11 22:05:12'),
(480, 312, '14th', '14th card', '2019-01-11 22:08:12', '2019-01-11 22:08:12'),
(481, 312, '15th', '15th card', '2019-01-11 22:08:40', '2019-01-11 22:08:40'),
(482, 312, '16', '16th', '2019-01-11 22:09:22', '2019-01-11 22:09:22'),
(483, 312, 'new card', 'new card', '2019-01-11 22:12:51', '2019-01-11 22:12:51'),
(484, 312, '2nd new card', '2nd new card', '2019-01-11 22:13:47', '2019-01-11 22:13:47'),
(485, 312, 'working', 'working', '2019-01-11 22:15:05', '2019-01-11 22:15:05'),
(487, 312, 'hello', 'hello', '2019-01-11 22:18:08', '2019-01-11 22:18:08'),
(488, 312, 'lksdjlfkjasd', 'laskjdflksdjfl', '2019-01-11 22:21:32', '2019-01-11 22:21:32'),
(489, 312, 'cc', 'cc', '2019-01-11 22:24:33', '2019-01-11 22:24:33'),
(490, 311, 'last card', 'last card', '2019-01-11 22:25:50', '2019-01-11 22:25:50'),
(491, 311, 'last card 2', 'last card 2', '2019-01-11 22:26:08', '2019-01-11 22:26:08'),
(492, 311, 'last card 3 ', 'last card 3', '2019-01-11 22:29:07', '2019-01-11 22:29:07'),
(493, 311, '54321', '54321', '2019-01-12 02:22:48', '2019-01-12 02:22:48'),
(494, 391, 'Beer', 'Lager', '2019-01-13 04:07:10', '2019-01-13 04:07:10'),
(502, 400, 'Exothermic Reaction', 'Heat is released', '2019-01-16 03:06:10', '2019-01-16 03:06:10'),
(503, 400, 'Endothermic Reaction', 'Heat is absorbed', '2019-01-16 03:06:20', '2019-01-16 03:06:20'),
(507, 402, 'asdf', 'asdf', '2019-01-18 00:49:07', '2019-01-18 00:49:07'),
(508, 402, 'asdf', 'asdf', '2019-01-18 00:49:10', '2019-01-18 00:49:10'),
(509, 403, 'asdf', 'asdf', '2019-01-18 00:49:57', '2019-01-18 00:49:57'),
(510, 404, 'fdsaf', 'fdsafdsa', '2019-01-18 21:44:09', '2019-01-18 21:44:09'),
(511, 404, 'fdsafa', 'fdsafds', '2019-01-18 21:44:13', '2019-01-18 21:44:13'),
(521, 415, 'asdasd', 'dasdads', '2019-01-18 23:29:45', '2019-01-18 23:29:45'),
(522, 416, 'asdf', 'asdf', '2019-01-18 23:50:01', '2019-01-18 23:50:01'),
(523, 416, 'asdf', 'asdf', '2019-01-18 23:50:03', '2019-01-18 23:50:03'),
(525, 449, 'OOP', 'object oriented programming', '2019-01-23 00:54:45', '2019-01-23 00:54:45'),
(527, 449, ' ', ' ', '2019-01-23 00:55:18', '2019-01-23 00:55:18'),
(528, 449, 'kkkkjlkjlkjlkjlkjlkxxxxxhttp://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449xxdddddddddddd', 'http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449http://mypocketcards.com/createflashcards/509/subcategory/449', '2019-01-23 00:57:19', '2019-01-23 00:57:19'),
(529, 452, ' d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d', ' d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d', '2019-01-23 01:30:39', '2019-01-23 01:30:39'),
(530, 453, 'Foo', 'Bar', '2019-01-23 04:25:21', '2019-01-23 04:25:21'),
(531, 391, 'Tequila', 'Margarita', '2019-01-23 04:39:34', '2019-01-23 04:39:34'),
(535, 455, 'jdfls;afj;sdalkjflsdkajflkjsda', 'jfdslka;fdlskajfdls;af', '2019-01-23 23:10:23', '2019-01-23 23:10:23'),
(536, 456, 'How to add something to db?', 'POST', '2019-01-24 07:00:00', '2019-01-24 07:00:00'),
(537, 456, 'How to retrieve something from db?', 'GET', '2019-01-24 07:01:28', '2019-01-24 07:02:50'),
(538, 456, 'How to update something on db?', 'UPDATE', '2019-01-24 07:02:02', '2019-01-24 07:02:02'),
(539, 456, 'How to delete something from db?', 'DELETE', '2019-01-24 07:02:27', '2019-01-24 07:02:27'),
(541, 459, '1', 'A', '2019-01-25 02:37:50', '2019-01-25 02:37:50'),
(542, 459, '2', 'B', '2019-01-25 02:37:56', '2019-01-25 02:37:56'),
(544, 465, 'What are closures in JavaScript?', 'Closures make it possible for a function to have \"private\" variables. A closure is a function having acces to the parent scope, even after the parent function was closed.', '2019-01-26 04:10:32', '2019-01-26 04:11:01'),
(545, 467, 'What are functions in JavaScript?', 'Functions \"encapsulate\" a task and combine many instructions into a single line of code.', '2019-01-26 04:18:03', '2019-01-26 04:18:25'),
(547, 471, 'What is a current', 'a flow of electric charge through a conductor', '2019-01-26 05:17:37', '2019-01-26 05:17:50'),
(548, 472, '我', 'wo', '2019-01-27 03:40:58', '2019-01-27 03:40:58'),
(549, 473, 'new card term1', 'new card def1', '2019-01-28 20:23:07', '2019-01-28 20:23:56'),
(550, 473, 'lkajsflkjdslkafjlsdkajflksdjaflkjsdalkfjsdlkajflsdkjaflksdajflkjsdalkfjsdalkjflksdjaflksdja', 'lakjsdflkjsadlkfjlksdajflksdjflkjsadlkfjlksdjaflkdsjaflkjdslakfjldksjflksda', '2019-01-28 20:23:19', '2019-01-28 20:23:19'),
(551, 471, 'term 2\nfdskafjds\njfldskjafkdljsf', 'definition 2 \nfldksjfdl;ajfdlksjfdas;\nflkdjasfl;dkajfdl;kjfads\nlkfjsldafds;aj', '2019-01-29 01:20:40', '2019-01-29 01:20:40'),
(552, 471, 'fdlskajf;dasj\nlkjfds;lajf;dsa\nljfl;dsjaf;ldksa\nfdsafdsaf\nfdslkjfldkafsad\nlfkjdsakflds', 'fasfdsljkf;ds\nlkjdfl;ja;fkdsa\nfldksajfdsf\nlkjfl;djaf;ds\nfklsdjafljdsfldskf\nlfkjsdakfljdslkfjad\n', '2019-01-29 01:21:26', '2019-01-29 01:22:31'),
(553, 471, 'fdaslfjdsakfj\nfdsajfldsakjfsda\nkfjdksajfksdajf', 'fdsakfjdksaljf\nfjdsklafjsdkla\njlkfjdslakfjalsk\nfjdlskajfkdsa\n', '2019-01-29 01:32:08', '2019-01-29 01:32:08'),
(554, 471, 'fdsafds\nfdsfda', 'fdafdsa\nfdsafdsafdsa', '2019-01-29 01:38:31', '2019-01-29 01:38:31'),
(560, 479, 'first card', 'first back', '2019-01-31 20:18:40', '2019-01-31 20:20:06'),
(561, 479, 'hello', 'bye', '2019-01-31 21:35:59', '2019-01-31 21:35:59'),
(565, 487, 'apple pie', 'time', '2019-02-05 20:28:38', '2019-02-05 20:28:38'),
(566, 487, 'x + y = 2\nx + y + 5', 'definition', '2019-02-05 20:56:55', '2019-02-05 20:56:55'),
(567, 485, 'Hello THERE', 'BYE :D ', '2019-02-06 05:10:38', '2019-02-15 16:59:03'),
(568, 485, 'ffwfw', 'fwfwfwf', '2019-02-06 05:10:41', '2019-02-06 05:10:41'),
(569, 485, 'wfwfwf', 'wfwf', '2019-02-06 05:10:43', '2019-02-06 05:10:43'),
(570, 491, 'Python', 'Data Science language', '2019-02-13 02:02:31', '2019-02-13 02:02:31'),
(572, 492, 'Dog', 'Men\'s bestfriend', '2019-02-13 02:04:44', '2019-02-13 02:04:44'),
(576, 494, 'what are the two branches of anthropology?', 'physical and cultural', '2019-02-15 00:59:37', '2019-02-15 01:57:01'),
(578, 494, 'What is culture?', 'the entire way a society lives and is organized, such as, ideas, customs, art, music, language, attitude, values/norms, and traditions', '2019-02-15 01:00:03', '2019-02-15 01:00:03'),
(579, 494, 'What is cultural diffusion?', 'When ideas from one culture are spread to another culture', '2019-02-15 01:00:21', '2019-02-15 01:00:21'),
(580, 494, 'What is artifact?', 'Object made by human in the past', '2019-02-15 01:00:38', '2019-02-15 01:00:38'),
(581, 495, 'asdf', 'asdf', '2019-02-15 01:21:02', '2019-02-15 01:21:02'),
(582, 494, 'what is anthropology', 'the study of many cultures that exist on our planet', '2019-02-15 01:38:46', '2019-02-15 01:38:46'),
(583, 494, 'What is non material culture?', 'things within a culture you can not touch Ex; values and norms, respect\n', '2019-02-15 01:57:16', '2019-03-05 23:44:40'),
(584, 497, 'closure', 'test', '2019-02-21 08:24:22', '2019-02-21 08:24:22'),
(585, 498, 'What were some of the key goals and motivations for the HTML5 specification?', 'Provide better semantic support for web page structure through new structural element tags.', '2019-02-24 05:24:02', '2019-02-24 05:24:02'),
(586, 499, 'Variables are used to', 'Store values by a particular name and allow retrieval of those values.', '2019-02-24 15:50:27', '2019-02-24 16:05:08'),
(587, 499, 'variable names are considered valid if', 'they do not start with a number, have no special characters except for $ and _, and are not wholly keywords in JS.  (var, for, function, etc).  Any other character is valid', '2019-02-24 15:51:37', '2019-02-24 15:51:37'),
(588, 499, 'variables that can hold a variety of characters are known as ', 'strings', '2019-02-24 15:52:03', '2019-02-24 15:52:03'),
(589, 499, 'variables defined with quotes like this : var a = \"hello\"', 'string literals', '2019-02-24 15:52:32', '2019-02-24 15:52:32'),
(590, 499, 'variables with numeric values not encapsulated in quotes', 'numbers', '2019-02-24 15:52:56', '2019-02-24 15:52:56'),
(591, 499, 'a variable defined as a number, for example : var a = 5', 'numeric literal', '2019-02-24 15:53:21', '2019-02-24 15:53:21'),
(592, 499, 'string literals can have the following characters surrounding them', 'single quotes, double quotes, and backticks / graves marks:\n\'string\' , \"string\", `string`', '2019-02-24 15:54:16', '2019-02-24 15:54:16'),
(593, 499, 'what type of variable can only hold one value', 'primitive variables like string, number, boolean, and special data types like undefined and null', '2019-02-24 15:55:03', '2019-02-24 15:55:03'),
(594, 499, 'what javascript value represent a lack of value in a variable', 'undefined and null', '2019-02-24 15:55:34', '2019-02-24 15:55:34'),
(595, 499, 'which value, undefined or null, is the natural state of a variable with no value in it', 'undefined.  null must be set', '2019-02-24 15:56:10', '2019-02-24 15:56:10'),
(596, 499, 'null if often used as a', 'placeholder for no value, much like a \"reserved\" sign at a restaurant table.  It lets you know that the space was intentionally left blank.', '2019-02-24 15:57:19', '2019-02-24 15:57:19'),
(597, 499, 'what types of variables can hold more than one value inside separate from any other values', 'objects and arrays.  Technically strings can hold multiple characters like an array.', '2019-02-24 15:57:55', '2019-02-24 15:57:55'),
(598, 499, 'what is the other term used in JS for objects and arrays', 'reference variables', '2019-02-24 15:58:23', '2019-02-24 15:58:23'),
(599, 499, 'reference variables act like', 'street signs, pointing to where the actual variable is stored.', '2019-02-24 15:58:41', '2019-02-24 15:58:41'),
(600, 499, 'what is significant about reference variables as opposed to primitive variables?', 'reference variables point to where the variable is.  So when they are passed into a function as an argument, you can change the original variable contents.  A reference variable is passed by value, and so will never change the original value directly in JS.', '2019-02-24 15:59:45', '2019-02-24 15:59:45'),
(601, 499, 'what sort of keys does an array use', 'numeric keys, starting at 0 and going to infinity', '2019-02-24 16:00:10', '2019-02-24 16:00:10'),
(602, 499, 'what sort of keys does an object use', 'alphanumeric keys.  They can be any combination of letters and numbers, but you must provide the keys.  They will not be auto generated.', '2019-02-24 16:00:52', '2019-02-24 16:00:52'),
(603, 499, 'When do object keys have to be surrounded by quotes (ie saved as string literals as opposed to implicit strings)', 'When the key name would constitute an illegal variable name in JS.  If it starts with a number, has an illegal special character, or is a keyword, then it must be put in quotes into the object.', '2019-02-24 16:02:26', '2019-02-24 16:02:26'),
(604, 499, 'how can a variable be used as a key in a js object?', 'by using square brackets with the variable inside', '2019-02-24 16:02:55', '2019-02-24 16:02:55'),
(605, 499, 'how can you access a legal variable name key in an object?', 'either with the dot operator, or the brackets.\n\na.hi  or a[\'hi\']', '2019-02-24 16:03:25', '2019-02-24 16:03:25'),
(606, 499, 'how can you access an illegal variable name key in an object', 'with square brackets, such as \n\na[\'illegal key because of spaces\']', '2019-02-24 16:04:04', '2019-02-24 16:04:04'),
(607, 499, 'The process of getting the value of a variable in a programmatic expression is known as', 'substitution', '2019-02-24 16:04:29', '2019-02-24 16:04:29'),
(608, 499, 'Variable (var) scope is determined by', 'The function they are inside of, not the nearest set of curly braces.  \"let\" and \"const\" are scoped by the nearest statement block, such as the curly braces of an if statement, for loop, or function.\n\nvar is scoped only by function statements.   If no function exists, in a browser, the variable will be in the window', '2019-02-24 16:48:41', '2019-02-24 16:48:41'),
(609, 499, 'var variables are hoisted.  hoisting means', 'the declaration (not the value/assignment) is brought up to the top of the current scope', '2019-02-24 16:50:54', '2019-02-24 16:50:54'),
(610, 499, 'let and const are also hoisted', 'false, let and const variables are not hoisted.  Only \'var\' variables are hoisted.', '2019-02-24 16:51:31', '2019-02-24 16:51:31'),
(611, 500, 'conditionals are used to', 'check if something is true or false right now, and then execute a block of code depending on that check', '2019-02-24 16:52:50', '2019-02-24 16:52:50'),
(612, 500, 'conditionals can be written with what types of statements', 'if statements, switch statements, and ternary statements.', '2019-02-24 16:53:27', '2019-02-24 16:53:27'),
(613, 500, 'an if statement can have what parts to it?', 'the if conditional block, followed with between 0 - infinity else if blocks, and followed by 0-1 else block', '2019-02-24 16:54:22', '2019-02-24 16:54:22'),
(614, 500, 'conditionals require that a comparison happen inside their parenthesis, like if( a < 5)', 'FALSE.  The only requirement is that the statement inside the parenthesis be truthy or falsey.  Any truthy or false value will work', '2019-02-24 16:55:30', '2019-02-24 16:55:30'),
(615, 500, 'Falsey is defined as', 'Any statement/variable lacking in value, such as 0, undefined, null, an empty string (\'\'), or false.', '2019-02-24 16:56:21', '2019-02-24 16:56:21'),
(616, 501, 'asdf', 'asdffff', '2019-02-24 16:56:26', '2019-02-24 16:56:26'),
(617, 501, 'fdsa', 'fasd111', '2019-02-24 16:56:35', '2019-02-24 16:56:35'),
(618, 500, 'Truthy is defined as', 'Any non-zero value.  Or put another way, anything that isn\'t falsey.  1, 100, -100, \'hello\', true are all examples of truthy values', '2019-02-24 16:57:07', '2019-02-24 16:57:07'),
(619, 502, 'vbn', 'bbnm', '2019-02-24 16:58:08', '2019-02-24 16:58:08'),
(620, 502, 'bbnm,.', ' nm,bnm,', '2019-02-24 16:58:14', '2019-02-24 16:58:14'),
(621, 500, 'Conditionals cam lack curly braces around their execution blocks, like this:\n\nif( something )  \n     console.log(\'it was true\');', 'TRUE.  If an if statement lacks curly braces for its execution block, it will only execute the next line.  The same is true for loops.\nFor example:\nif( false ) //this if will never be true\n    console.log(\'this will not show\'); \n    console.log(\'this will show\');', '2019-02-24 16:59:27', '2019-02-24 16:59:27'),
(622, 500, 'empty strings are truthy or falsey', 'falsey.  Empty strings lack value', '2019-02-24 16:59:49', '2019-02-24 16:59:49'),
(623, 500, 'an empty array is truthy or falsey', 'Truthy.  An array is a reference variable, and the reference itself is an address, which as a value.  So all reference variables are truthy in JS', '2019-02-24 17:00:33', '2019-02-24 17:00:33'),
(624, 500, 'A ternary is', 'A condensed conditional that also assigns a value by default\n\nFor example:\nvar a = me===\'happy\'  ? \'hahaha\' : \'boohoo\';   //if var me is string happy, assign \'hahaha\' to a, otherwise assign \'boohoo\'', '2019-02-24 17:02:26', '2019-02-24 17:02:26'),
(625, 500, 'a ternary can be nested in other conditionals, switches, and other ternaries ', 'True.  A ternary can be used anywhere a conditional can be used.  They tend to be less readable in some cases, however, and normal conditionals should be used in most situations.', '2019-02-24 17:03:23', '2019-02-24 17:03:23'),
(626, 500, 'Switches can do relative comparisons (like 4 < 2)', 'False (mostly).  Switches were meant to compare direct values.\nswitch( something ){\n   case \'a\':\n   case \'r\':', '2019-02-24 17:04:17', '2019-02-24 17:04:17'),
(627, 500, 'Switch statements can have how many cases statements and default statements?', 'Switches can have between 1 and infinity case statements, and only 1 default statement, put at the bottom', '2019-02-24 17:05:28', '2019-02-24 17:05:28'),
(628, 500, 'The default statement in a switch is the equivalent of a what statement in an if statement?', 'The else.  They both execute something if nothing else matches.', '2019-02-24 17:06:02', '2019-02-24 17:06:02'),
(629, 500, 'break statements are used in switch statements for what purpose?', 'They stop the execution in a switch.  So that you can stop processing a particular case.  If a break is omitted, then execution will continue to the next case statement as well.', '2019-02-24 17:07:07', '2019-02-24 17:07:07'),
(630, 503, 'functions are used to', 'Run a set of statements based on the name of the function and a set of data passed into the function.  It focuses on repeatability of a set of actions with slight variations depending on the passed in data', '2019-02-24 17:09:45', '2019-02-24 17:09:45'),
(631, 503, 'The required parts of a standard function are', 'The function keyword, the name of the function, the parenthesis with any parameters, and the curly braces defining the execution block of the function\'s code.', '2019-02-24 17:10:38', '2019-02-24 17:10:38'),
(632, 503, 'A function\'s name has what rules?', 'The same rules as variables: cannot start with a number.  No special characters except $ and _, and cannot be a keyword.', '2019-02-24 17:11:23', '2019-02-24 17:11:23'),
(633, 503, 'What is a good practice when making a function name?', 'Incorporate a verb into it.  Functions do things, and a very helps tell you what it does.', '2019-02-24 17:11:50', '2019-02-24 17:11:50'),
(634, 503, 'Functions can have how many parameters?', 'between 0 and infinity.  Though generally above 3, you should be looking at passing in data via an object or array.  Objects are the most handy, because you can name the keys.', '2019-02-24 17:12:38', '2019-02-24 17:12:38'),
(635, 503, 'A function\'s code is called the', 'Function definition / declaration.  It\'s how the function knows what to do.', '2019-02-24 17:13:23', '2019-02-24 17:13:23'),
(636, 503, 'A function name followed by a set of parenthesis only, like dothis(), is a', 'Function run / execution / call / invocation.  It tells the function to run and what arguments to use for its parameters', '2019-02-24 17:14:08', '2019-02-24 17:14:08'),
(637, 503, 'What is the difference between function parameters and arguments', 'Parameters are defined in the function definition, and are the variables that will hold the function\'s incoming values.\nArguments are used in function invocation, and hold the values that will be passed into the parameters.', '2019-02-24 17:15:10', '2019-02-24 17:15:10'),
(638, 503, 'Function arguments are passed to the function parameters in what order', 'In the order they are sent.  First argument will go into the first parameter, 2nd into 2nd, and so forth', '2019-02-24 17:15:46', '2019-02-24 17:15:46'),
(639, 503, 'What happens if a function has more parameters in its definition than its function call has arguments', 'Any umatched parameters will be undefined.', '2019-02-24 17:16:29', '2019-02-24 17:16:29'),
(640, 503, 'What happens in a function when the definition has fewer parameters than the call has arguments', 'The extra arguments will be discard and only available in the \"arguments\" variable inside the function', '2019-02-24 17:17:13', '2019-02-24 17:17:13'),
(641, 503, 'What default variables, besides parameters, can a function have access to', 'arguments, this, event', '2019-02-24 17:18:59', '2019-02-24 17:18:59'),
(642, 503, 'The arguments variable has', 'A copy of all of the arguments that were passed into the function, regardless if they had a parameter to catch them.', '2019-02-24 17:19:29', '2019-02-24 17:19:29'),
(643, 503, 'The this variable has', 'A reference to the object that the function is executing inside of.  In the event of an event, for example, it would be the dom object that triggered the event.  Otherwise it will likely be the window or a class object that invoked the function.', '2019-02-24 17:20:26', '2019-02-24 17:20:26'),
(644, 503, 'The event variable has', 'All pertinent data regarding the event that triggered the function, if any.  For example, the mouse position, the key that was pressed, the state of the shift key, when the event happened, which dom object trigged the event, which dom object received the event.', '2019-02-24 17:21:18', '2019-02-24 17:21:18'),
(645, 503, 'Function blocks define what for a variable inside them', 'The scope of \'var\' variables, and the scope of let and const of unnested let and const variables', '2019-02-24 17:22:10', '2019-02-24 17:22:10'),
(646, 503, 'Local variables are', 'Variables that were created inside the current scope of execution (which line you are on presently)', '2019-02-24 17:22:39', '2019-02-24 17:22:39'),
(647, 503, 'Global variables are', 'Variables defined outside of the current scope.  Think of it as the same difference between \"foreign\" (global) and \"domestic\" (local)', '2019-02-24 17:23:31', '2019-02-24 17:23:31'),
(648, 503, 'Function parameters are considered to be local or global variables', 'Local.  Function parameters are treated in the same way as \"var\" variables', '2019-02-24 17:24:01', '2019-02-24 17:24:01'),
(649, 503, 'The return statement of a function', 'substitutes a value in place of the execution of the function\nleaves the function immediately', '2019-02-24 17:24:34', '2019-02-24 17:24:34'),
(650, 503, 'A function that only takes in variables through parameters and only returns a value (no use of global variables or manipulating the DOM)', 'is considered to be a \"pure function\"', '2019-02-24 17:25:20', '2019-02-24 17:25:20'),
(651, 503, 'A function without a name is considered to be a', 'an anonymous function.', '2019-02-24 17:25:38', '2019-02-24 17:25:38'),
(652, 503, 'Anonymous functions can take how many forms', '2.  Regular anonymous functions, and arrow functions\nfunction(){}      and      ()=>{}', '2019-02-24 17:26:26', '2019-02-24 17:26:26'),
(653, 503, 'Named functions, anonymous functions, and arrow functions differ how?', 'They have no major difference in how they function.  Named functions can be called by name, anonymous functions have to be assigned to something to be used.   Arrow functions, unlike named or regular anonymous functions, prevent \"this\" from being redefined.', '2019-02-24 17:27:52', '2019-02-24 17:27:52'),
(654, 503, 'Function lexical scope is', 'The series of function definitions that dictate what variables a statement has access to.  The local scope of a line, as well as the parental scope of every function in which the current function is DEFINED', '2019-02-24 17:28:45', '2019-02-24 17:28:45'),
(655, 503, 'Lexical scope can also be determined by where a function is run', 'FALSE.  Lexical scope, the variable space a statement has access to, is only defined by where a function is defined/declared, NOT where it is run.', '2019-02-24 17:29:42', '2019-02-24 17:29:42'),
(656, 503, 'A function can be a parameter of another function', 'False.  Only variables can be parameters.  Anything can be used as a function ARGUMENT', '2019-02-24 17:30:47', '2019-02-24 17:30:47'),
(657, 503, 'What part of named functions are hoisted?', 'Everything.  Unlike variables, which only have their definitions hoisted, a function has its entire code hoisted to the top of the current scope.', '2019-02-24 17:34:00', '2019-02-24 17:34:00'),
(658, 503, 'functions can be assigned to variables', 'True.  Usually anonymous functions can be assigned to variables, but named functions can also be assigned to other variables.\n\nvar a = function() {}\nfunction haha(){}\nvar b = haha;', '2019-02-24 17:36:03', '2019-02-24 17:36:03'),
(659, 503, 'In event handler assignments, the parenthesis should not be included, like in $(\'div\').click( doStuff );', 'True.  The parenthesis mean \"run this right now\" and you really want to pass the address of the function to the event, not the substituted execution of the function', '2019-02-24 17:37:29', '2019-02-24 17:37:29'),
(660, 504, 'CSS stands for', 'Cascading Style Sheets', '2019-02-24 21:26:04', '2019-02-24 21:26:04'),
(661, 504, 'CSS allows a page to', 'dictate the look and appearance of dom objects / elements separate from the structural elements of the page.  IE you can have  various tags and have the appearance aspect of the page in a separate document.', '2019-02-24 21:27:13', '2019-02-24 21:27:13'),
(662, 504, 'CSS can be defined / added to a page/element in these 4 places', 'what the page would look like by default, known as the user-agent stylesheet in Chrome\ninline on the element in a \"style\" attribute on the opening tag.\ninternally to the document, inside a style tag\nexternally to the document, connected to the page via a link tag', '2019-02-24 21:28:37', '2019-02-24 21:28:37'),
(663, 504, 'CSS that is not inline is targeted to particular elements via', 'CSS selectors', '2019-02-24 21:29:08', '2019-02-24 21:29:08'),
(664, 504, 'The three major types of CSS selectors are', 'tags (like div, p, header, h3)\nclasses (preceded by a ., like .warningText, or .navigation)\nIDs (preceded by a #, like #mainModal,  #infoFooter)', '2019-02-24 21:30:15', '2019-02-24 21:30:15'),
(665, 504, 'CSS properties take the form of', 'key: value pairs, with the key separated from the value by a colon (:), and each key/value pair separated from each other via a semicolon (;)', '2019-02-24 21:31:08', '2019-02-24 21:31:08'),
(666, 504, 'The combination of a CSS selector, the definition block surrounded by {}, and the key/value properties inside is known as', 'A CSS rule', '2019-02-24 21:31:52', '2019-02-24 21:31:52'),
(667, 504, 'Which CSS applies to an element is dictated by 4 things', 'Inheritance from its parents (if any property can be inherited)\nSpecificity\nCascading', '2019-02-24 21:32:36', '2019-02-24 21:32:36'),
(668, 504, 'Cascading in CSS is defined as', 'Any similar/same property between two CSS rules will be overridden by the last rule to apply to it.', '2019-02-24 21:33:35', '2019-02-24 21:33:35'),
(669, 504, 'A good example of a CSS cascaded property is', 'Two selectors that affect the same element with the same specificity, the last one wins\n<div class=\"class2 class1\">this will be green</div>\n.class1 {   color: red }\n.class2 { color: green }', '2019-02-24 21:35:22', '2019-02-24 21:35:22'),
(670, 504, 'Specificity can be defined as', 'In regards to the selectors that apply to an element, the more specific / directly targeted selectors will win.', '2019-02-24 21:36:11', '2019-02-24 21:36:11'),
(671, 504, 'What is the general order of specificity', 'inheritance < * < tag < .class < #id < inline < !important < inline !important', '2019-02-24 21:36:53', '2019-02-24 21:36:53'),
(672, 504, 'In terms of specificity, a class will beat', 'inheritance, the wildcard selector (*), and tags', '2019-02-24 21:37:44', '2019-02-24 21:37:44'),
(673, 504, 'Selectors like :hover, :nth-child(), :visited, and :last-of-type are examples of', 'Pseudo-selectors', '2019-02-24 21:38:50', '2019-02-24 21:38:50'),
(674, 504, '+ and ~ ( for example, p + div  or h1 ~ div ) are examples of', 'sibling selectors', '2019-02-24 21:39:24', '2019-02-24 21:39:24'),
(675, 504, 'This type of selector\ndiv > p\nor \ndiv p\nis known as a\n', 'Children selectors', '2019-02-24 21:40:10', '2019-02-24 21:40:10'),
(676, 504, 'What is the difference between \"div p\" and \"div > p\"', 'The first will select any paragraph that is a descendent of a div tag, no matter how deep into the div tag it is.\nThe second will only select p tags that are direct descendants of a div tag', '2019-02-24 21:41:05', '2019-02-24 21:41:05'),
(677, 504, 'div + p will select', 'Any p tag that is a sibling of a div tag, and comes immediately after that div tag', '2019-02-24 21:41:33', '2019-02-24 21:41:33'),
(678, 504, 'h1 ~ div will select', 'Any div that is a sibling of an h1 tag, as long as it comes after the h1', '2019-02-24 21:42:10', '2019-02-24 21:42:10'),
(679, 504, 'div::before or .hello::after are examples of', 'Pseudo-elements', '2019-02-24 21:42:31', '2019-02-24 21:42:31'),
(680, 504, 'Pseudo elements are', 'Elements that are strictly defined inside the CSS.  They are not defined in the HTML at all.  For the purposes of html, they are children of the element they were attached to.', '2019-02-24 21:43:12', '2019-02-24 21:43:12'),
(681, 504, 'margin: 20px\nmeans what?', 'The element will have a margin of 20 pixels on the top, right, bottom, and left.', '2019-02-24 21:43:44', '2019-02-24 21:43:44'),
(682, 504, 'padding: 20px 10px\nmeans what?', 'The element will have padding of 20 pixels on the top and bottom, 10 pixels on the left and right', '2019-02-24 21:44:11', '2019-02-24 21:44:11'),
(683, 504, 'border-width: 10px 20% 5px\ndefines what?', 'The thickness of the border will be 10 pixels on top\nA border of 20% thickness relative to the width of the parent element on the left and right\n5 pixels thickness border on the bottom', '2019-02-24 21:46:10', '2019-02-24 21:46:10'),
(684, 504, 'margin: 0 5px 10px 20px\ndefined what', 'The margin will be 0 on the top, 5 pixels on the right, 10 pixels on the bottom, and 20 pixels on the left', '2019-02-24 21:46:56', '2019-02-24 21:46:56'),
(685, 504, 'What are the typical values for display:', 'inline, inline-block, block, flex, inline-flex', '2019-02-24 21:47:22', '2019-02-24 21:47:22'),
(686, 504, 'What are the main attributes of display: inline?', 'It ignores any externally set height and width, is only the size of its contents, and will sit alongside any other element if there is room to do so.', '2019-02-24 21:48:15', '2019-02-24 21:48:15'),
(687, 504, 'What are the primary characteristics of block?', '100% width unless told to be otherwise, height the size of its content (like all elements), will heed height and width changes, will not start on the same line as another element, and will not allow another element to start on the same line.', '2019-02-24 21:49:15', '2019-02-24 21:49:15'),
(688, 504, 'What traits does inline-block share from inline and block?', 'It will only be the size of its contents like inline,\nIt will allow other elements to sit beside it like inline\nIt will allow resizing like block', '2019-02-24 21:50:02', '2019-02-24 21:50:02'),
(689, 504, 'display: flex differs from display: inline, inline-block, and block in that', 'inline, inline-block, and block are 2 dimensional display properties what will cause element wrap according to the normal flow of the document.  display: flex is a 1 dimensional display property and will try to make all children stay on the same row.', '2019-02-24 21:51:17', '2019-02-24 21:51:17'),
(690, 504, 'What is another key difference between display: flex and other display properties', 'Flex primarily deals with an element\'s relationship with its siblings, whereas the other properties relate to the parent element or only to the contents of the element itself', '2019-02-24 21:52:16', '2019-02-24 21:52:16'),
(691, 504, 'The flow of the document is defined as', 'Left to right\nTop to bottom\nback to front', '2019-02-24 21:52:43', '2019-02-24 21:52:43'),
(692, 504, 'What css properties will remove / partially remove an element from the flow of the document', 'position: absolute, position: fixed, position: sticky, float: left, float: right', '2019-02-24 21:53:30', '2019-02-24 21:53:30'),
(693, 504, 'What are the traits of position: static', 'The default position of all elements.  \nElement will appear where the flow of the document dictates.\nIgnored by position: absolute in terms of height, width, left, right, top, bottom\nOverlapped by other position elements if they would appear in the same place, even if the static element came after\nWill ignore attempts to move it via top, right, bottom, left', '2019-02-24 21:55:04', '2019-02-24 21:58:28'),
(694, 504, 'What are the traits of position: relative', 'Appears relative to where it would have appeared if it was position: static.\nMoves according to the top, right, bottom, left properties of the element\ndisplayed element ignores flow of document, but acts like it is where it was originally (otherwise appears below/above other elements)', '2019-02-24 21:56:14', '2019-02-24 21:56:14'),
(695, 504, 'What are the defining traits of position: absolute', 'Will move relative to its first non-static parent, or the html element, whichever one comes first\nMoves itself according to its parent\'s sides, not the original position of the static element\nTaken out of the flow of the document', '2019-02-24 22:00:21', '2019-02-24 22:00:21'),
(696, 504, 'What are the defining characteristics of position: fixed', 'Will be positioned relative to the viewport, not its static position or its parent element.', '2019-02-24 22:00:58', '2019-02-24 22:00:58'),
(697, 504, 'How does position: sticky behave?', 'Will appear in its position static placement until it would move off the screen, then it will stick to the appropriate side of the viewport. \nIt is a combination of position: static and position: fixed', '2019-02-24 22:01:52', '2019-02-24 22:01:52'),
(698, 504, 'When you see a color defined as a pound sign followed by 0 to F, what is that called?', 'A hexadecimal value', '2019-02-24 22:02:36', '2019-02-24 22:02:36'),
(699, 504, 'What do the numbers of a hexadecimal number stand for?', '#RRGGBB, where RR is red, GG is green, and BB is blue', '2019-02-24 22:03:15', '2019-02-24 22:03:15'),
(700, 504, 'What are the min and max of the hexadecimal numbers?', '00 to FF, which represents all the numbers from 0 to 255', '2019-02-24 22:03:53', '2019-02-24 22:03:53'),
(701, 504, 'What are the hexadecimal numbers for pure black and pure white?', '#000000 and #FFFFFF (or #000  and #FFF) respectively', '2019-02-24 22:04:44', '2019-02-24 22:04:44'),
(702, 504, 'What is the hexadecimal number for pure red, pure green or pure blue?', '#FF0000 (or #F00), #00FF00 (or #0F0), or #0000FF (or #00F)', '2019-02-24 22:05:38', '2019-02-24 22:05:38'),
(703, 504, 'What does the nth-child pseudo-selector do?', 'Selects every nth child as dictated by what is in its parenthesis.\nnth-child(2) selects the 2nd child (starting from 1)\nnth-child(even) selects every even child, which would be the 2nd, 4th, 6th, etc)\nnth-child(3n) would select every 3rd element (ie 3, 6, 9, 12, etc)\nnth-child(2n + 4) would select every 2nd child starting from the 4th child (4, 6, 8, 10, etc)', '2019-02-24 22:07:54', '2019-02-24 22:07:54'),
(704, 504, 'What is the opposite of first-child and first-of-type?', 'last-child and last-of-type', '2019-02-24 22:08:21', '2019-02-24 22:08:21'),
(705, 504, 'div:last-child selects the last child of a div', 'FALSE.  div:last-child selects a div that IS the last child.\ndiv > *:last-child would select the last child of a div', '2019-02-24 22:09:21', '2019-02-24 22:09:21'),
(706, 504, 'p:nth-of-type(3) selects', 'Whatever the type of the element is, that count of it.  \nIn this case, it would select the 3rd paragraph of any parent.', '2019-02-24 22:10:27', '2019-02-24 22:10:27'),
(707, 504, '.hello:nth-of-type(2) selects the 2nd element with a class of \'hello', 'FALSE: it selects the 2nd occurrence of a tag if it also happens to have a class of hello.  For example: \n\nhttps://jsbin.com/qubaka/edit?html,css,output', '2019-02-24 22:18:21', '2019-02-24 22:18:21'),
(709, 504, 'float ignores everything except', 'Text and other floating elements. ', '2019-02-24 22:24:14', '2019-02-24 22:24:14'),
(710, 504, 'The property that will allow a non-floating element to not be sucked up under a floating element is', 'clear.  Either clear: left, clear: right, or clear: both', '2019-02-24 22:24:46', '2019-02-24 22:24:46'),
(711, 504, 'Bootstrap 3 primarily uses this to achieve its column layout:', 'float', '2019-02-24 22:25:05', '2019-02-24 22:25:05'),
(712, 504, 'Bootstrap 4 primarily uses this to achieve its column layout', 'flex', '2019-02-24 22:25:19', '2019-02-24 22:25:19'),
(713, 504, 'What is one drawback of using float on a child element', 'The parent will ignore the child in terms of figuring out its own height.  It will act like the child isn\'t there for the purposes of height.', '2019-02-24 22:25:56', '2019-02-24 22:25:56'),
(714, 504, 'Float does what in regards to the width of a block level element', 'Float will override block\'s 100% width rule, and so you\'ll need to set it manually.', '2019-02-24 22:26:37', '2019-02-24 22:26:37'),
(715, 505, 'PHP originally stood for', 'Personal Home Page', '2019-02-24 23:03:14', '2019-02-24 23:03:14'),
(716, 505, 'PHP Currently stands for', 'PHP Hypertext Preprocessor', '2019-02-24 23:03:27', '2019-02-24 23:03:27'),
(717, 505, 'PHP Works in conjunction with what type of program', 'A web server, such as Apache or Nginx', '2019-02-24 23:04:01', '2019-02-24 23:04:01'),
(718, 505, 'All variables in php begin with', 'A dollar sign.  $something is a valid name.  You cannot use $ in the rest of the name.  All other rules are similar to JS', '2019-02-24 23:04:39', '2019-02-24 23:04:39'),
(719, 505, 'What are the four main math operators in PHP and how do they differ from JS?', '+, -, *, and /.\n\nThey are the same except that + does not concatenate strings.', '2019-02-24 23:05:27', '2019-02-24 23:05:27'),
(720, 505, 'What characters are used to make strings in PHP', 'single quote and double quotes, \'\' and \"\"', '2019-02-24 23:05:57', '2019-02-24 23:05:57'),
(721, 505, 'What\'s the difference between single and double quotes in PHP', 'Single quotes act like single and double quotes in JS, and double quotes act like backticks in PHP.\nAll quotes are capable of multi-line strings in PHP, unlike JS where only backticks can have multi-line strings', '2019-02-24 23:06:50', '2019-02-24 23:06:50'),
(722, 505, 'How do you concatenate in PHP?', 'The dot operator.  \na += \"hello\" in JS would be $a .= \"hello\" in PHP\n\"hello\" + \"goodbye\" in JS would be \"hello\" . \"goodbye\" in PHP', '2019-02-24 23:07:53', '2019-02-24 23:07:53'),
(723, 505, 'What is the PHP equivalent of \nif( a === 4 ){ \n    document.writeln(\'equal\');\n} else {\n   document.writeln(\'not equal\');\n}\nfrom JS? ', 'if($a === 4 ){\n    print(\'equal\');\nelse {\n    print(\'not equal\');\n}', '2019-02-24 23:09:53', '2019-02-24 23:09:53'),
(724, 505, 'Assuming the variable a is an array, what is the PHP equivalent of this:\nfor( var i=0; i < a.length; i++){\n    document.writeln( a[ i ] );\n}', 'for( $i = 0; $i < count( $a );  $i++){\n    print( $a[ $i ] );\n}', '2019-02-24 23:11:41', '2019-02-24 23:11:41'),
(725, 505, 'If you made this array in JS\nvar a = [1, 2, 3];\n\nWhat would the equal code in PHP?', '$a = [1, 2, 3];\n\nAnother way:\n$a = new Array(1, 2, 3);', '2019-02-24 23:12:31', '2019-02-24 23:12:31'),
(726, 505, 'What is the rough equivalent of an JS object literal in PHP?', 'An associative array', '2019-02-24 23:12:52', '2019-02-24 23:13:47'),
(727, 505, 'In JS, a statement inside a function can see variables in functions / scope outside of itself (otherwise known as its lexical scope).  By default, what can a statement in a PHP function see outside of the function?', 'Nothing except for super globals', '2019-02-24 23:14:56', '2019-02-24 23:14:56'),
(728, 505, 'A superglobal is a', 'A global array that holds either data from the client, or data about the server', '2019-02-24 23:15:21', '2019-02-24 23:15:21'),
(729, 505, 'What are some examples of a PHP superglobal', '$_GET :the query string parameters\n$_POST: all the body url encoded parameters\n$_REQUEST: a combination of the GET and POST vars plus some headers.  \n$_FILES: uploaded files metadata\n$_SERVER: various pieces of server info\n$_COOKIES: cookies shared between client and server\n$_SESSION: data stored for each client by the server', '2019-02-24 23:18:07', '2019-04-02 20:45:29'),
(730, 505, 'Is PHP a asynchronous or synchronous language?', 'Synchronous.  The only way to instigate asynchronous functionality is to instantiate a new php page from the apache server.', '2019-02-24 23:19:11', '2019-02-24 23:19:11'),
(731, 505, 'The common debugging functions in php are', 'print_r: recursively print a complex variable like an array\nvar_dump: very similar to print_r, but will also print the size of the variables', '2019-02-24 23:20:02', '2019-02-24 23:20:02'),
(732, 506, 'Term information ', 'Definition Term', '2019-02-28 00:22:10', '2019-02-28 00:22:10'),
(733, 506, 'Term 2', 'Definition 2', '2019-02-28 00:22:27', '2019-02-28 00:22:27'),
(734, 507, 'what is verocity', 'it is a force with speed', '2019-03-05 23:44:06', '2019-03-05 23:44:06'),
(735, 508, 'afdsafa', 'asdfafdsa', '2019-03-06 23:35:09', '2019-03-06 23:35:09'),
(736, 508, 'asdfafdsaasdfadfsa', 'asdfasfsafdsa', '2019-03-06 23:35:20', '2019-03-06 23:35:20'),
(737, 508, 'asdfsafdsafdsaf', 'asdfsafdasfsasa', '2019-03-06 23:35:24', '2019-03-06 23:35:24'),
(738, 510, '2 + 2', 'Addition example', '2019-03-07 23:59:11', '2019-03-07 23:59:11');
INSERT INTO `cards` (`ID`, `topicID`, `frontText`, `backText`, `created`, `updated`) VALUES
(739, 507, '2+2', 'addition example', '2019-03-08 00:16:08', '2019-03-08 00:16:08'),
(744, 514, 'new term', 'new definition', '2019-03-08 00:53:45', '2019-03-08 00:53:45'),
(745, 514, 'asdfa', 'adsfsafdsa', '2019-03-08 00:54:30', '2019-03-08 00:54:30'),
(746, 513, 'nbvn', 'vbnbv', '2019-03-08 00:55:06', '2019-03-08 00:55:06'),
(747, 513, 'hfghfg', 'hgfhf', '2019-03-08 00:55:08', '2019-03-08 00:55:08'),
(748, 513, 'hgfhf', 'hgfhf', '2019-03-08 00:55:10', '2019-03-08 00:55:10'),
(749, 515, 'sfdgsdgfs', 'sgdfdsgfds', '2019-03-08 00:56:27', '2019-03-08 00:56:27'),
(750, 515, 'sdgfsgfds', 'dgfsgdsg', '2019-03-08 00:56:30', '2019-03-08 00:56:30'),
(751, 515, 'sdfgdsgfdegs', 'gfgfdsg', '2019-03-08 00:56:33', '2019-03-08 00:56:33'),
(752, 516, 'In JS, what the the two types of primary reference variables', 'objects and arrays', '2019-04-02 19:12:14', '2019-04-02 19:12:14'),
(753, 516, 'Arrays have this type of index', 'numeric index', '2019-04-02 19:12:38', '2019-04-02 19:12:38'),
(754, 516, 'Objects have this type of index', 'alphanumeric index (letters and or numbers)', '2019-04-02 19:13:02', '2019-04-02 19:13:02'),
(755, 516, 'objects are arranged in this order', 'The order that key/value pairs were added', '2019-04-02 19:13:27', '2019-04-02 19:13:27'),
(756, 516, 'Object keys are considered to be', 'strings', '2019-04-02 19:13:37', '2019-04-02 19:13:37'),
(757, 516, 'Can you make JS keys without quotes around them', 'Only if the key name obeys the rules of variable names.  If it does not, it must be a string', '2019-04-02 19:14:06', '2019-04-02 19:14:06'),
(758, 516, 'Arrays can be reordered after initial creation', 'true', '2019-04-02 19:14:32', '2019-04-02 19:14:32'),
(759, 516, 'The closest physical analog to an array is a', 'list.  Things are kept either in an specific order or a general order.  The position doesn\'t have to be specified, like a grocery list', '2019-04-02 19:15:19', '2019-04-02 19:15:19'),
(760, 516, 'The closest physical analog to an object is a', 'dictionary.  It allows quick lookup of a value by a particular key.  All you have to do is use the key in question', '2019-04-02 19:16:01', '2019-04-02 19:16:01'),
(761, 516, 'What are the literal characters for arrays and objects', 'Arrays are square brackets, [], objects are curly brackets/braces, {}', '2019-04-02 19:17:03', '2019-04-02 19:17:03'),
(762, 516, 'Reference variables contain what inside them?', 'An address (reference) to another location.  That location holds potentially multiple key/value pairs', '2019-04-02 19:17:45', '2019-04-02 19:17:45'),
(763, 516, 'What is the normal way to access a part of an array', 'Bracket notation, with an numeric index between the square brackets.  Like array[3]', '2019-04-02 19:18:22', '2019-04-02 19:18:22'),
(764, 516, 'The first position of an array is', 'array at the zero index.  array[0]', '2019-04-02 19:18:41', '2019-04-02 19:18:41'),
(765, 516, 'The last position of an array is', 'The length - 1, or array.length-1', '2019-04-02 19:19:02', '2019-04-02 19:19:02'),
(766, 516, 'The length of an array is always 1 position past the end because', 'Arrays are zero based.  So an array with length 4 would occupy spots 0, 1, 2, 3', '2019-04-02 19:19:36', '2019-04-02 19:19:36'),
(767, 516, 'If you had an array inside an array, that is called', 'A nested or multidimensional array', '2019-04-02 19:19:57', '2019-04-02 19:19:57'),
(768, 516, 'if you had the following array, how would you get \'t\'\nvar array = [\n   [\'d\',\'u\',\'d\',\'e\'],\n   [\'c\',\'a\',\'t\']\n]', 'array[1][2].  array[1] gets [\'c\',\'a\',\'t\'], array[1][2] gets the 2nd element of that array, or \'t\'', '2019-04-02 19:21:43', '2019-04-02 19:21:43'),
(769, 516, 'To copy an array, you would primarily use what function?', 'slice.  Slice can make a copy of an array.  Its parameters can narrow which part you copy.', '2019-04-02 19:22:29', '2019-04-02 19:22:29'),
(770, 516, 'Which function finds a particular item location in an array', 'indexOf    haystackArray.indexOf(\'needle\')', '2019-04-02 19:23:03', '2019-04-02 19:23:03'),
(771, 516, 'Strings can also be considered to be arrays', 'True.  Strings are immutable (unchangeable) arrays.  You can read any position of the string, but you cannot change it.', '2019-04-02 19:23:46', '2019-04-02 19:23:46'),
(772, 516, 'Objects key/value pairs that reference a variable, like a string, number, another object, array, boolean, etc are called what of the object?', 'Property', '2019-04-02 19:24:39', '2019-04-02 19:24:39'),
(773, 516, 'Functions within an object are referred to as what?', 'A method', '2019-04-02 19:24:53', '2019-04-02 19:24:53'),
(774, 516, 'Object properties/methods are normally accessed via the what operator?', 'Dot operator.  object.property', '2019-04-02 19:25:17', '2019-04-02 19:25:17'),
(775, 516, 'You cannot use brackets for objects, they are only for arrays', 'False.  You can use brackets with an object.   o.stuff can also be o[\'stuff\']', '2019-04-02 19:26:01', '2019-04-02 19:26:01'),
(776, 516, 'What are the primary uses for bracket notation in an object', 'To access a key that would be an illegal variable name in JS, or to access a key that is stored in a variable', '2019-04-02 19:26:42', '2019-04-02 19:26:42'),
(777, 516, 'var o = { name: \'Jane\', height: 175, field: \'what?\'}\nvar field = \'height\';\nconsole.log(o.field);\n\nWhat would be the output of the console log?', '\'what?\'.\no.field won\'t access the variable field, it will treat field as the string field.\nso o.field is the same thing as o[\'field\'].\nYou must use brackets with the variable, o[field], to get 175', '2019-04-02 19:28:59', '2019-04-02 19:28:59'),
(778, 516, 'To remote a key/value arbitrarily from an array, you should use', 'splice.  splice(index, lengthToDelete, data, to, add)', '2019-04-02 19:29:50', '2019-04-02 19:29:50'),
(779, 516, 'How would you delete a key from an object', 'delete.\n\ndelete o.keyToDelete', '2019-04-02 19:30:12', '2019-04-02 19:30:12'),
(780, 516, 'Which would be the best data structure to store a list of students', 'An array.  It allows rapid reorganization of the list', '2019-04-02 19:30:45', '2019-04-02 19:30:45'),
(781, 516, 'Which is the best data structure to store a list of students that you want to look up someone by their last name quickly', 'An object, as long as the key is the last name', '2019-04-02 19:31:18', '2019-04-02 19:31:18'),
(782, 516, 'What is the best data structure to have a list of dogs that can be organized into a favorite list?', 'An array, arrays allow reordering', '2019-04-02 19:31:54', '2019-04-02 19:31:54'),
(783, 516, 'What are the add/remove functions for array for the end of the list', 'pop/push', '2019-04-02 19:32:11', '2019-04-02 19:32:11'),
(784, 516, 'What are the add/remove functions for the beginning of an array', 'shift/unshift', '2019-04-02 19:32:37', '2019-04-02 19:32:37'),
(785, 516, 'What is the best data structure to store a group of cars arbitrarily', 'An array.  You don\'t have to specify the keys, so you can add them arbitrarily', '2019-04-02 19:33:24', '2019-04-02 19:33:24'),
(786, 516, 'What is the best way to store players for a game, so you can cycle through the players one after the other', 'An array of objects.  The array allows you to easily cycle through or reorder the list.  The objects allow you to store specific values for each player and easily grab them again', '2019-04-02 19:34:32', '2019-04-02 19:34:32'),
(787, 505, 'PHP is a code preprocessor for a', 'A webserver.  Primarily Apache, but sometimes other webservers like Nginx', '2019-04-02 20:46:34', '2019-04-02 20:46:34'),
(788, 505, 'PHP is asynchronous or synchronous?', 'Synchronous.  By default code runs only after the previous line has run.', '2019-04-02 20:47:25', '2019-04-02 20:47:25'),
(789, 505, 'The shortcut operator for printing a value in PHP is\nie <?php print($a); ?>', '<?= $a; ?>', '2019-04-02 20:49:57', '2019-04-02 20:49:57'),
(790, 505, 'The output for a php file is called the', 'output buffer.  Sometimes called STDIO or standard output.', '2019-04-02 20:50:40', '2019-04-02 20:50:40'),
(791, 505, 'PHP true objects can be made with', 'instantiations of stdClass.  for example $a = new stdClass();', '2019-04-02 20:51:22', '2019-04-02 20:51:22'),
(792, 505, 'To access the property or method of a php object, use', 'Skinny arrow operators.  ->\nFor example, $o->stuff  or $o->runStuff()', '2019-04-02 20:52:04', '2019-04-02 20:52:04'),
(793, 505, 'Associative array keys must be surrounded in quotes', 'True.  For example $a = [\'thing\'=>\'stuff\']', '2019-04-02 20:52:42', '2019-04-02 20:52:42'),
(794, 518, 'Syntax Parser', 'A program that reads your code and determines what it does and if its grammar is valid. Your code isn’t magic. Someone else wrote a program to translate it for the computer.\n', '2019-04-11 14:57:02', '2019-04-11 14:57:02'),
(795, 518, 'Lexical Environment', 'Where something sits physically in your code. So where you see things written gives you an idea of where it will actually sit in the computer’s memory and how it will interact with other elements and variables and functions in the program when the syntax parser parses over the code.', '2019-04-11 14:57:58', '2019-04-11 14:57:58'),
(796, 518, 'Execution Context', 'A wrapper to help manage the code that is running. There are lots of lexical environments. Which one is running is managed via execution contexts. It can contain things beyond what you’ve written in your code.', '2019-04-11 15:02:56', '2019-04-11 15:02:56'),
(797, 518, 'Name/Value Pair', 'a name which maps to a unique value. The name may be defined more than once, but it only can have one value in any given context (remember, we’re talking about execution context, i.e., a section of code that is running). That value may be more name/value pairs.', '2019-04-11 15:03:36', '2019-04-11 15:03:36'),
(798, 518, 'Object', 'A collection of name/value pairs.', '2019-04-11 15:04:01', '2019-04-11 15:04:01'),
(799, 518, 'Global', 'Accessible to everything everywhere in your code.', '2019-04-11 15:04:58', '2019-04-11 15:04:58'),
(800, 518, 'The Global Execution Context creates 2 things for you', '1. Global Object: ‘Window’ in browsers (=== to ‘this’)\n2. ‘this’: a special variable (=== to ‘Window’)', '2019-04-11 15:06:14', '2019-04-11 15:06:14'),
(801, 518, 'Creation Phase', 'First phase of the Execution Context. Gives us the Global Object, which is set up and in memory, and this, which is set up and in memory. There’s an Outer Environment that’s created. And in this Creation Phase, as the syntax parser runs through your code and begins to set up what you’ve written for translation, it recognizes where you’ve declared variables and where you’ve created functions. So it sets up memory space for those variables and functions (and it’s that step that is somewhat confusingly called Hoisting).', '2019-04-11 15:10:52', '2019-04-11 15:10:52'),
(802, 518, 'Execution Phase', 'After your variables and functions are set up in memory from the Creation Phase, the Execution Phase is when all your code is going to be run, or executed, line-by-line.', '2019-04-11 15:12:22', '2019-04-11 15:12:22'),
(803, 518, 'Undefined', 'A special keyword in JavaScript that means the variable has not been set. It means that even though you, the programmer, may have declared a variable, you never set a value. It is also the value that variables receive by default during the Creation Phase of the Execution Context.', '2019-04-11 15:15:22', '2019-04-11 15:15:22'),
(804, 518, 'Single-Threaded', 'One command being executed at a time. JavaScript behaves in a single-threaded manner.', '2019-04-11 15:16:05', '2019-04-11 15:16:05'),
(805, 518, 'Synchronous Execution', 'Code that is being executed one at a time and in the order that it appears. JavaScript is synchronous in its behavior.', '2019-04-11 15:17:04', '2019-04-11 15:17:04'),
(806, 518, 'Execution Stack', 'Stack is just what it sounds like: one on top of the other on top of the other. In JavaScript\'s case, it\'s a stack of Execution Contexts that are created anytime a function is executed/called. It will go through the Creation Phase (setting up space for its own variables and functions), and the Execution Phase (running the code line by line). However, if you have another function invocation, it’s going to stop at that line of code and create another Execution Context, and run that code. Whichever one is on top of the stack is the one that is currently running. Once it finishes executing, it\'s popped off the stack.', '2019-04-11 15:22:13', '2019-04-11 15:22:13'),
(807, 518, 'Variable Environment', 'Where the variables in your code live and how they relate to each other in memory. Just think: \"Where\'s the variable?\"', '2019-04-11 15:25:37', '2019-04-11 15:25:37'),
(808, 518, 'Scope', '\"Where are we able to see/access the variable?\"\n\nVariables defined inside a function are not accessible (visible) from outside the function.', '2019-04-11 15:27:22', '2019-04-11 15:27:22'),
(809, 518, 'Outer Environment', 'Every Execution Context has a reference to its outer environment, determined by where it sits lexically in the code.', '2019-04-11 15:32:23', '2019-04-11 15:32:23'),
(810, 518, 'Scope Chain', 'The chain of outer environment references. When you ask for a variable while running a line of code inside of any particular Execution Context, if the JavaScript engine can’t find that variable, it will look for it in the outer environment and that outer reference, where it goes to look, is going to depend on where the function sits lexically in your code. The JavaScript engine will go through the Scope Chain to find the variable.', '2019-04-11 15:34:45', '2019-04-11 15:34:45'),
(811, 518, 'Asynchronous Callbacks', 'The JavaScript engine doesn’t exist by itself in the browser. There are other elements and pieces of code happening outside, such as the rendering engine that actually renders what you’re looking at on the screen, or HTTP requests that have to go out and get data. The JavaScript engine has hooks where it can talk to the rendering engine and change what the webpage looks like or go out and request data. But what’s happening inside just the JS engine is synchronous, and it only does these things on the Event Queue when the Execution Stack is empty.', '2019-04-11 16:03:41', '2019-04-11 16:03:41'),
(812, 518, 'Event Queue', 'A queue of events that might be happening. We can listen for an event (usually from the user, a mouse click or key press) and have a function handle that event. The click event, for example, if someone clicks on the screen. If I have a function that needs to respond to that click event what happens is that the Event Queue gets looked at by the JavaScript engine but only when the Execution Stack is empty. If something is there, it looks to see whether a particular function should be run when that event is triggered.', '2019-04-11 16:05:49', '2019-04-11 16:05:49'),
(813, 519, '\'this\' exists in every single function', 'True', '2019-04-13 04:50:50', '2019-04-13 04:50:50'),
(814, 519, 'What data type is \'this\'?', 'Object. If you console.log(typeof this), it\'ll return \"object.\"', '2019-04-13 04:53:43', '2019-04-13 04:53:43'),
(815, 519, '\'this\' is, by default, determined at what time?', 'When a function is called.', '2019-04-13 04:54:36', '2019-04-13 04:54:36'),
(816, 519, 'By default, \'this\' is the Global Object/Window.', 'True', '2019-04-13 04:55:03', '2019-04-13 04:55:03'),
(817, 519, 'If there\'s an object to the left of dot of a function call (the method), what is \'this\'?', '\'this\' would be the name of the object to the left of the dot. When you console.log, \'this\' is the console object and log() is the method.', '2019-04-13 04:57:03', '2019-04-13 04:57:03'),
(818, 519, 'Why do we have to use .bind?', 'In order to control what \'this\' is. new creates a brand new object (get it?), and says \'this\' is that new object.', '2019-04-13 05:49:12', '2019-04-13 05:49:12'),
(819, 519, 'What does \'new\' do?', 'It creates a new object. It runs the function w/ the new object and sets the \'this\' as the new object.', '2019-04-13 05:55:17', '2019-04-13 05:55:17'),
(820, 521, 'Hola', 'Hello in Spanish', '2019-04-18 21:09:17', '2019-04-18 21:09:17'),
(821, 522, 'ljl;jl', 'klj;lkj', '2019-04-23 18:33:18', '2019-04-23 18:33:18'),
(822, 523, 'Akita', 'Japanese breed dog', '2019-05-03 20:51:31', '2019-05-03 20:51:31'),
(823, 523, 'Greyhound', 'Also a bus', '2019-05-03 20:52:19', '2019-05-03 20:52:19'),
(824, 523, 'Yorkshire', 'Must have a bow', '2019-05-03 20:52:42', '2019-05-03 20:52:42'),
(825, 523, 'Pug', 'Instagram star', '2019-05-03 20:53:21', '2019-05-03 20:53:21'),
(826, 523, 'Chihuahua', 'a rich dog', '2019-05-03 20:53:43', '2019-05-03 20:53:43'),
(827, 526, 'fdsfd', 'fdsfds', '2019-05-17 21:55:37', '2019-05-17 21:55:37'),
(828, 526, 'fdsfds', 'fdsfds', '2019-05-17 21:55:40', '2019-05-17 21:55:40'),
(829, 527, 'Question 12', 'Answer 12', '2019-06-13 17:32:39', '2019-06-13 17:33:12'),
(830, 527, 'Q2', 'A2', '2019-06-13 17:32:52', '2019-06-13 17:32:52'),
(831, 529, 'hi', 'hi', '2019-07-07 19:17:06', '2019-07-07 19:17:06'),
(832, 532, 'Chart of accounts', 'LIST OF ALL COMPANY ACCOUNTS', '2019-09-10 19:01:14', '2019-09-10 19:01:14'),
(833, 538, 'https://www. mypocketcards.com', '5', '2019-09-25 13:39:36', '2019-09-25 13:39:36'),
(834, 539, 'Aaa', 'Dddd', '2019-09-28 04:05:52', '2019-09-28 04:05:52'),
(835, 540, 'wmk', 'wmk', '2019-11-14 09:13:10', '2019-11-14 09:13:10');

-- --------------------------------------------------------

--
-- Table structure for table `sets`
--

CREATE TABLE `sets` (
  `ID` bigint(20) NOT NULL,
  `userID` bigint(20) NOT NULL,
  `category` varchar(50) NOT NULL,
  `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` enum('new','updated','public','private') NOT NULL DEFAULT 'new',
  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `sets`
--

INSERT INTO `sets` (`ID`, `userID`, `category`, `created`, `status`, `updated`) VALUES
(396, 1, 'Brandon sucks', '2018-12-26 21:50:06', 'new', '2018-12-26 21:50:06'),
(397, 95, 'brandon sucks', '2018-12-26 22:04:59', 'new', '2018-12-26 22:04:59'),
(400, 97, 'asdf', '2018-12-29 00:10:31', 'new', '2018-12-29 00:10:31'),
(401, 99, 'Web Development', '2018-12-29 21:09:49', 'new', '2018-12-29 21:09:49'),
(437, 99, 'animals', '2019-01-05 09:46:49', 'new', '2019-01-05 09:46:49'),
(441, 102, 'aaa', '2019-01-06 01:12:05', 'new', '2019-01-06 01:12:05'),
(442, 102, 'hello', '2019-01-06 01:37:22', 'new', '2019-01-06 01:37:22'),
(445, 103, 'zqz', '2019-01-08 20:46:51', 'new', '2019-01-08 20:46:51'),
(446, 104, 'abc', '2019-01-08 20:59:54', 'new', '2019-01-08 20:59:54'),
(447, 104, 'def', '2019-01-08 21:01:24', 'new', '2019-01-08 21:01:24'),
(448, 104, 'animals', '2019-01-08 21:03:10', 'new', '2019-01-08 21:03:10'),
(449, 1, 'brandon sucks #2', '2019-01-08 21:16:54', 'new', '2019-01-08 21:16:54'),
(450, 1, 'brandon sucks #3', '2019-01-08 21:18:46', 'new', '2019-01-08 21:18:46'),
(452, 105, 'fishman\'s cards', '2019-01-08 21:20:21', 'new', '2019-01-08 21:20:21'),
(456, 106, 'greetins', '2019-01-09 00:16:16', 'new', '2019-01-09 00:16:16'),
(457, 1, 'Party', '2019-01-13 04:07:00', 'new', '2019-01-13 04:07:00'),
(465, 110, 'Chemistry', '2019-01-16 03:05:38', 'new', '2019-01-16 03:05:38'),
(467, 109, 'asdf', '2019-01-18 00:49:04', 'new', '2019-01-18 00:49:04'),
(468, 111, 'asdf', '2019-01-18 00:49:54', 'new', '2019-01-18 00:49:54'),
(469, 112, 'fasdfd', '2019-01-18 21:44:07', 'new', '2019-01-18 21:44:07'),
(476, 116, 'adasd', '2019-01-18 23:29:42', 'new', '2019-01-18 23:29:42'),
(477, 117, 'asdf', '2019-01-18 23:49:58', 'new', '2019-01-18 23:49:58'),
(478, 118, 'asdf', '2019-01-19 01:42:49', 'new', '2019-01-19 01:42:49'),
(491, 120, '', '2019-01-22 20:02:23', 'new', '2019-01-22 20:02:23'),
(509, 121, 'Comp Sci', '2019-01-23 00:54:34', 'new', '2019-01-23 00:54:34'),
(510, 121, 'dd', '2019-01-23 01:00:14', 'new', '2019-01-23 01:00:14'),
(511, 121, 'dddddddddddddddddddddddddddd', '2019-01-23 01:00:30', 'new', '2019-01-23 01:00:30'),
(512, 121, ' d d d d d d d d d d d d d d d d d ', '2019-01-23 01:30:31', 'new', '2019-01-23 01:30:31'),
(513, 13, 'Test', '2019-01-23 04:23:45', 'new', '2019-01-23 04:23:45'),
(518, 1, 'asdf', '2019-01-23 23:10:12', 'new', '2019-01-23 23:10:12'),
(519, 1, ' RESTful API', '2019-01-24 06:58:05', 'new', '2019-01-24 06:58:05'),
(521, 122, 'Hello', '2019-01-25 02:37:44', 'new', '2019-01-25 02:37:44'),
(525, 126, 'Web Development', '2019-01-26 04:04:39', 'new', '2019-01-26 04:04:39'),
(526, 127, 'Web Development', '2019-01-26 04:09:37', 'new', '2019-01-26 04:09:37'),
(527, 128, 'Web Development', '2019-01-26 04:17:31', 'new', '2019-01-26 04:17:31'),
(530, 99, 'Physics', '2019-01-26 05:17:21', 'new', '2019-01-26 05:17:21'),
(531, 129, 'CHIN', '2019-01-27 03:40:35', 'new', '2019-01-27 03:40:35'),
(532, 130, 'askdjflkdsaslkdfjldskajflkkdsfjlkdsajflkdsjflkdsj', '2019-01-28 20:22:57', 'new', '2019-01-28 20:22:57'),
(533, 133, 'adsfsa', '2019-01-28 23:10:37', 'new', '2019-01-28 23:10:37'),
(534, 99, 'new category', '2019-01-29 16:59:41', 'new', '2019-01-29 16:59:41'),
(537, 3, 'sdfasf', '2019-02-01 01:38:44', 'new', '2019-02-01 01:38:44'),
(538, 99, 'asdf', '2019-02-01 23:13:06', 'new', '2019-02-01 23:13:06'),
(539, 135, 'physics', '2019-02-07 20:07:56', 'new', '2019-02-07 20:07:56'),
(540, 136, 'Computer Science', '2019-02-13 02:02:14', 'new', '2019-02-13 02:02:14'),
(541, 136, 'Animals', '2019-02-13 02:04:35', 'new', '2019-02-13 02:04:35'),
(542, 136, 'Japan', '2019-02-13 02:07:25', 'new', '2019-02-13 02:07:25'),
(543, 137, 'Anthropology', '2019-02-15 00:58:58', 'new', '2019-02-15 00:58:58'),
(544, 137, 'Biology', '2019-02-15 01:52:02', 'new', '2019-02-15 01:52:02'),
(545, 139, 'test', '2019-02-21 08:24:12', 'new', '2019-02-21 08:24:12'),
(546, 140, 'HTML', '2019-02-24 05:21:53', 'new', '2019-02-24 05:21:53'),
(547, 141, 'Programming', '2019-02-24 15:49:54', 'new', '2019-02-24 15:49:54'),
(548, 142, 'cars', '2019-02-24 16:56:13', 'new', '2019-02-24 16:56:13'),
(549, 142, 'ghjk', '2019-02-24 16:58:03', 'new', '2019-02-24 16:58:03'),
(550, 143, 'Chapter 1', '2019-02-28 00:21:37', 'new', '2019-02-28 00:21:37'),
(551, 137, 'Physics', '2019-03-05 23:43:47', 'new', '2019-03-05 23:43:47'),
(552, 145, 'subjec', '2019-03-06 23:34:42', 'new', '2019-03-06 23:34:42'),
(553, 145, 'subject2', '2019-03-06 23:37:27', 'new', '2019-03-06 23:37:27'),
(554, 146, 'Math', '2019-03-07 23:58:49', 'new', '2019-03-07 23:58:49'),
(555, 147, 'Paei', '2019-03-08 00:03:46', 'new', '2019-03-08 00:03:46'),
(557, 148, 'jhjh', '2019-03-08 00:51:15', 'new', '2019-03-08 00:51:15'),
(558, 145, 'new subject', '2019-03-08 00:53:34', 'new', '2019-03-08 00:53:34'),
(559, 145, 'ghjhgj', '2019-03-08 00:56:24', 'new', '2019-03-08 00:56:24'),
(565, 153, 'JavaScript: Understanding the Weird Parts', '2019-04-11 14:55:44', 'new', '2019-04-11 14:55:44'),
(566, 153, 'LFZ', '2019-04-13 04:50:27', 'new', '2019-04-13 04:50:27'),
(567, 154, 't2', '2019-04-17 16:51:27', 'new', '2019-04-17 16:51:27'),
(568, 155, 'Dog', '2019-04-18 21:07:24', 'new', '2019-04-18 21:07:24'),
(569, 1, 'Code', '2019-04-23 18:33:12', 'new', '2019-04-23 18:33:12'),
(570, 156, 'Mammal', '2019-05-03 20:50:49', 'new', '2019-05-03 20:50:49'),
(571, 158, 'Animals', '2019-05-13 19:58:51', 'new', '2019-05-13 19:58:51'),
(572, 158, 'Programming', '2019-05-13 19:59:14', 'new', '2019-05-13 19:59:14'),
(573, 159, 'fdsf', '2019-05-17 21:55:34', 'new', '2019-05-17 21:55:34'),
(574, 159, 'Physics', '2019-06-13 17:32:21', 'new', '2019-06-13 17:32:21'),
(575, 161, 'Sports pharmacology', '2019-07-06 01:50:33', 'new', '2019-07-06 01:50:33'),
(576, 162, 'math', '2019-07-07 19:16:59', 'new', '2019-07-07 19:16:59'),
(577, 163, 'React Flash Cards', '2019-08-12 14:07:00', 'new', '2019-08-12 14:07:00'),
(578, 164, 'Math', '2019-09-09 20:13:38', 'new', '2019-09-09 20:13:38'),
(579, 1, 'Accounting', '2019-09-10 19:00:46', 'new', '2019-09-10 19:00:46'),
(583, 165, 'Aktiver MyPocket Card', '2019-09-25 13:38:54', 'new', '2019-09-25 13:38:54'),
(584, 166, 'SD', '2019-09-28 04:05:16', 'new', '2019-09-28 04:05:16'),
(585, 167, 'welmake79', '2019-11-14 09:12:53', 'new', '2019-11-14 09:12:53');

-- --------------------------------------------------------

--
-- Table structure for table `topics`
--

CREATE TABLE `topics` (
  `ID` bigint(20) NOT NULL,
  `setID` bigint(20) NOT NULL,
  `subCategory` varchar(40) NOT NULL,
  `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` enum('new','updated','deleted') NOT NULL DEFAULT 'new',
  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `topics`
--

INSERT INTO `topics` (`ID`, `setID`, `subCategory`, `created`, `status`, `updated`) VALUES
(311, 396, 'he is terrible at coding\n', '2018-12-26 21:50:06', 'new', '2018-12-26 21:50:06'),
(312, 396, 'brandon is korean', '2018-12-26 21:51:15', 'new', '2018-12-26 21:51:15'),
(316, 397, 'asfdf', '2018-12-26 22:17:03', 'new', '2018-12-26 22:17:03'),
(328, 400, 'asdf', '2018-12-29 00:10:31', 'new', '2018-12-29 00:10:31'),
(331, 397, '2', '2018-12-29 02:14:04', 'new', '2018-12-29 02:14:04'),
(332, 397, 'sdfsdf', '2018-12-29 03:27:47', 'new', '2018-12-29 03:27:47'),
(333, 397, 'afaf', '2018-12-29 03:30:44', 'new', '2018-12-29 03:30:44'),
(334, 397, 'asfasf', '2018-12-29 03:30:45', 'new', '2018-12-29 03:30:45'),
(335, 401, 'Javascript', '2018-12-29 21:09:50', 'new', '2018-12-29 21:09:50'),
(345, 396, 'fdsafdas', '2019-01-04 23:31:40', 'new', '2019-01-04 23:31:40'),
(346, 396, 'fdsafsd', '2019-01-04 23:31:53', 'new', '2019-01-04 23:31:53'),
(352, 401, 'dafsdaf', '2019-01-05 00:59:58', 'new', '2019-01-05 00:59:58'),
(362, 437, 'birds', '2019-01-05 09:46:50', 'new', '2019-01-05 09:46:50'),
(369, 441, 'aaa', '2019-01-06 01:12:05', 'new', '2019-01-06 01:12:05'),
(370, 442, 'asdf1234', '2019-01-06 01:37:22', 'new', '2019-01-06 01:37:22'),
(373, 445, 'zzxc', '2019-01-08 20:46:51', 'new', '2019-01-08 20:46:51'),
(374, 446, 'def', '2019-01-08 20:59:54', 'new', '2019-01-08 20:59:54'),
(375, 447, 'jhg', '2019-01-08 21:01:24', 'new', '2019-01-08 21:01:24'),
(376, 448, 'mammals', '2019-01-08 21:03:10', 'new', '2019-01-08 21:03:10'),
(378, 449, 'he sucks again', '2019-01-08 21:16:54', 'new', '2019-01-08 21:16:54'),
(381, 450, 'too many errors', '2019-01-08 21:18:47', 'new', '2019-01-08 21:18:47'),
(383, 452, 'fishman food', '2019-01-08 21:20:21', 'new', '2019-01-08 21:20:21'),
(384, 452, 'tired', '2019-01-08 21:25:35', 'new', '2019-01-08 21:25:35'),
(385, 452, 'zyxw', '2019-01-08 21:46:42', 'new', '2019-01-08 21:46:42'),
(386, 450, 'errors', '2019-01-08 21:48:42', 'new', '2019-01-08 21:48:42'),
(390, 456, 'hello', '2019-01-09 00:16:17', 'new', '2019-01-09 00:16:17'),
(391, 457, 'Drinks', '2019-01-13 04:07:00', 'new', '2019-01-13 04:07:00'),
(400, 465, 'Chemical Reaction', '2019-01-16 03:05:38', 'new', '2019-01-16 03:05:38'),
(402, 467, 'asdf', '2019-01-18 00:49:05', 'new', '2019-01-18 00:49:05'),
(403, 468, 'asdf', '2019-01-18 00:49:54', 'new', '2019-01-18 00:49:54'),
(404, 469, 'fdafds', '2019-01-18 21:44:07', 'new', '2019-01-18 21:44:07'),
(415, 476, 'asdasd', '2019-01-18 23:29:42', 'new', '2019-01-18 23:29:42'),
(416, 477, 'asdf', '2019-01-18 23:49:58', 'new', '2019-01-18 23:49:58'),
(417, 478, 'asdf', '2019-01-19 01:42:49', 'new', '2019-01-19 01:42:49'),
(418, 478, 'asdf', '2019-01-19 01:43:07', 'new', '2019-01-19 01:43:07'),
(432, 491, '', '2019-01-22 20:02:24', 'new', '2019-01-22 20:02:24'),
(449, 509, 'Hello World', '2019-01-23 00:54:35', 'new', '2019-01-23 00:54:35'),
(450, 510, 'ss', '2019-01-23 01:00:14', 'new', '2019-01-23 01:00:14'),
(451, 511, 'dddddddddddddddddddddddddddd', '2019-01-23 01:00:30', 'new', '2019-01-23 01:00:30'),
(452, 512, ' d d d d d d d d d d d d d dd d d d d d', '2019-01-23 01:30:31', 'new', '2019-01-23 01:30:31'),
(453, 513, 'Test', '2019-01-23 04:23:45', 'new', '2019-01-23 04:23:45'),
(455, 518, 'asdf', '2019-01-23 23:10:14', 'new', '2019-01-23 23:10:14'),
(456, 519, 'HTTP Requests', '2019-01-24 06:58:05', 'new', '2019-01-24 06:58:05'),
(457, 401, 'ajsldfkjsljdflsdkajfkdsjaflkjdlfkjsdlkfj', '2019-01-24 11:51:20', 'new', '2019-01-24 11:51:20'),
(459, 521, 'Hi', '2019-01-25 02:37:45', 'new', '2019-01-25 02:37:45'),
(464, 525, 'Javascript', '2019-01-26 04:04:39', 'new', '2019-01-26 04:04:39'),
(465, 526, 'Javascript', '2019-01-26 04:09:37', 'new', '2019-01-26 04:09:37'),
(467, 527, 'JavaScript', '2019-01-26 04:17:31', 'new', '2019-01-26 04:17:31'),
(471, 530, 'Chapter 1', '2019-01-26 05:17:22', 'new', '2019-01-26 05:17:22'),
(472, 531, 'CH 1', '2019-01-27 03:40:35', 'new', '2019-01-27 03:40:35'),
(473, 532, 'askdfjlkdsjf', '2019-01-28 20:22:57', 'new', '2019-01-28 20:22:57'),
(474, 532, 'asdfjlksd', '2019-01-28 20:24:37', 'new', '2019-01-28 20:24:37'),
(475, 532, 'apples', '2019-01-28 20:30:28', 'new', '2019-01-28 20:30:28'),
(476, 533, 'asdfsd', '2019-01-28 23:10:38', 'new', '2019-01-28 23:10:38'),
(477, 533, 'topic', '2019-01-28 23:12:54', 'new', '2019-01-28 23:12:54'),
(479, 534, 'This is a new topic', '2019-01-31 20:18:01', 'new', '2019-01-31 20:18:01'),
(485, 537, 'sdfasfd', '2019-02-01 01:43:28', 'new', '2019-02-01 01:43:28'),
(486, 537, 'fasfaf', '2019-02-01 01:43:36', 'new', '2019-02-01 01:43:36'),
(487, 538, 'asdf', '2019-02-01 23:13:06', 'new', '2019-02-01 23:13:06'),
(488, 538, 'halp', '2019-02-04 15:53:30', 'new', '2019-02-04 15:53:30'),
(490, 539, 'new subcategory', '2019-02-07 20:08:39', 'new', '2019-02-07 20:08:39'),
(491, 540, 'Languages', '2019-02-13 02:02:14', 'new', '2019-02-13 02:02:14'),
(492, 541, 'Canine', '2019-02-13 02:04:35', 'new', '2019-02-13 02:04:35'),
(494, 543, 'Chapter 1', '2019-02-15 00:58:58', 'new', '2019-02-15 00:58:58'),
(495, 543, 'Chapter 2', '2019-02-15 01:20:55', 'new', '2019-02-15 01:20:55'),
(496, 544, 'chapter 2', '2019-02-15 01:52:02', 'new', '2019-02-15 01:52:02'),
(497, 545, 'test', '2019-02-21 08:24:12', 'new', '2019-02-21 08:24:12'),
(498, 546, 'Junior Questions', '2019-02-24 05:21:53', 'new', '2019-02-24 05:21:53'),
(499, 547, 'variables', '2019-02-24 15:49:54', 'new', '2019-02-24 15:49:54'),
(500, 547, 'conditionals', '2019-02-24 16:52:10', 'new', '2019-02-24 16:52:10'),
(501, 548, 'brands', '2019-02-24 16:56:13', 'new', '2019-02-24 16:56:13'),
(502, 549, 'hjkl', '2019-02-24 16:58:03', 'new', '2019-02-24 16:58:03'),
(503, 547, 'functions', '2019-02-24 17:08:10', 'new', '2019-02-24 17:08:10'),
(504, 547, 'css', '2019-02-24 21:25:47', 'new', '2019-02-24 21:25:47'),
(505, 547, 'PHP Intro', '2019-02-24 23:02:47', 'new', '2019-02-24 23:02:47'),
(506, 550, 'Fish', '2019-02-28 00:21:37', 'new', '2019-02-28 00:21:37'),
(507, 551, 'chapter 1', '2019-03-05 23:43:47', 'new', '2019-03-05 23:43:47'),
(508, 552, 'topic', '2019-03-06 23:34:42', 'new', '2019-03-06 23:34:42'),
(509, 553, 'jlkadsjfla', '2019-03-06 23:37:27', 'new', '2019-03-06 23:37:27'),
(510, 554, 'Adding', '2019-03-07 23:58:49', 'new', '2019-03-07 23:58:49'),
(511, 555, 'Shdhs', '2019-03-08 00:03:46', 'new', '2019-03-08 00:03:46'),
(513, 557, 'jhgjhg', '2019-03-08 00:51:15', 'new', '2019-03-08 00:51:15'),
(514, 558, 'jaldsfa', '2019-03-08 00:53:35', 'new', '2019-03-08 00:53:35'),
(515, 559, 'dfgsgf', '2019-03-08 00:56:24', 'new', '2019-03-08 00:56:24'),
(516, 547, 'reference variables', '2019-04-02 19:11:07', 'new', '2019-04-02 19:11:07'),
(517, 547, 'jquery', '2019-04-03 13:54:01', 'new', '2019-04-03 13:54:01'),
(518, 565, 'Syntax Parser', '2019-04-11 14:56:07', 'new', '2019-04-11 14:56:07'),
(519, 566, '\'this\'', '2019-04-13 04:50:27', 'new', '2019-04-13 04:50:27'),
(520, 567, 't2', '2019-04-17 16:51:27', 'new', '2019-04-17 16:51:27'),
(521, 568, 'Cat', '2019-04-18 21:07:24', 'new', '2019-04-18 21:07:24'),
(522, 569, 'JS', '2019-04-23 18:33:12', 'new', '2019-04-23 18:33:12'),
(523, 570, 'Dogs', '2019-05-03 20:50:49', 'new', '2019-05-03 20:50:49'),
(524, 571, 'Have Wings', '2019-05-13 19:58:51', 'new', '2019-05-13 19:58:51'),
(525, 572, 'Javascript', '2019-05-13 19:59:14', 'new', '2019-05-13 19:59:14'),
(526, 573, 'fdsfsd', '2019-05-17 21:55:34', 'new', '2019-05-17 21:55:34'),
(527, 574, 'Law of newton', '2019-06-13 17:32:21', 'new', '2019-06-13 17:32:21'),
(528, 575, 'wada', '2019-07-06 01:50:33', 'new', '2019-07-06 01:50:33'),
(529, 576, 'math', '2019-07-07 19:17:00', 'new', '2019-07-07 19:17:00'),
(530, 577, 'React', '2019-08-12 14:07:00', 'new', '2019-08-12 14:07:00'),
(531, 578, 'Algebra', '2019-09-09 20:13:38', 'new', '2019-09-09 20:13:38'),
(532, 579, 'Book Keeping', '2019-09-10 19:00:46', 'new', '2019-09-10 19:00:46'),
(538, 583, '5295655300009762', '2019-09-25 13:38:54', 'new', '2019-09-25 13:38:54'),
(539, 584, 'Gaslamp', '2019-09-28 04:05:16', 'new', '2019-09-28 04:05:16'),
(540, 585, 'wmk', '2019-11-14 09:12:53', 'new', '2019-11-14 09:12:53');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `ID` bigint(20) NOT NULL,
  `googleID` varchar(30) DEFAULT NULL,
  `displayName` varchar(20) NOT NULL,
  `avatar` varchar(256) DEFAULT NULL,
  `status` enum('active','inactive','banned') NOT NULL DEFAULT 'active',
  `added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `password` varchar(60) NOT NULL,
  `email` varchar(255) NOT NULL,
  `tutorial` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`ID`, `googleID`, `displayName`, `avatar`, `status`, `added`, `password`, `email`, `tutorial`) VALUES
(1, '', 'chronicSurfer', '/avatars/turtle.png', 'active', '2019-01-24 06:56:58', '$2a$10$7mmVEB0rd3sFD9fHo.KojeWNv8CcD62bCJi7pzeaeLxtemwtUKaAq', 'hamhamginger@gmail.com', 1),
(3, '', 'Tiffers', 'http://southparkstudios.mtvnimages.com/shared/characters/kids/wendy-testaburger.png', 'active', '2019-01-17 23:59:14', '$2a$10$7mmVEB0rd3sFD9fHo.KojeWNv8CcD62bCJi7pzeaeLxtemwtUKaAq', 'destroynow@gmail.com', 0),
(4, '', 'NinjaV', 'https://c7.uihere.com/files/29/523/710/stock-illustration-royalty-free-stock-photography-illustration-vector-japanese-ninja-thumb.jpg', 'active', '2018-12-10 20:43:53', '$2a$10$7mmVEB0rd3sFD9fHo.KojeWNv8CcD62bCJi7pzeaeLxtemwtUKaAq', 'hamhamgirl@gmail.com', 0),
(5, NULL, 'brandon', 'haha.jpg', 'active', '2018-12-11 02:01:22', '$2a$10$7mmVEB0rd3sFD9fHo.KojeWNv8CcD62bCJi7pzeaeLxtemwtUKaAq', 'pluto007@mail.com', 0),
(6, NULL, 'Tiffany', NULL, 'active', '2018-12-10 20:32:57', '$2a$10$TuSn8DdOmQYKlXLYGkklRep584jQ0zFT0zCbWFFcCBrx/bNzy9g0K', 'hamham@gmail.com', 0),
(7, NULL, 'SomeGuy', NULL, 'active', '2018-12-10 20:39:58', '$2a$10$7mmVEB0rd3sFD9fHo.KojeWNv8CcD62bCJi7pzeaeLxtemwtUKaAq', 'guy@mail.com', 0),
(8, NULL, 'hamhamhamUPDATED', NULL, 'active', '2018-12-21 21:16:10', '$2a$10$1eGnPuROo0rdUcftndq.p.mmEZ4Oh3C1vH2aWXcjcD3FRLaDA5uCO', 'hamhamham@gmail.com', 0),
(9, NULL, 'erin', NULL, 'active', '2018-12-13 00:52:08', '$2a$10$4nyHZm5xmOZqBe621PIIO.LEHl8waJ8pg5i39bU9H4Ia/W0kQSxC6', 'erin@gmail.com', 0),
(10, NULL, 'Tiffanator', NULL, 'active', '2018-12-13 02:34:17', '$2a$10$KVf.wfYHlBx5nLFGtWEoqOU.z2EukmGSbbeOHXnouy2GLgOEAAMk2', 'tiffsucks@gmail.com', 0),
(11, NULL, 'codyiscoding', NULL, 'active', '2018-12-14 18:26:39', '$2a$10$JNZVZ.mOn.jDg8gJIVUdEeQl9kwFrDmYG94ArqG7kPV9ce9Qd3aHC', 'cody@mail.com', 0),
(13, NULL, 'akira', '/avatars/rabbit.png', 'active', '2019-01-23 04:25:38', '$2a$10$ArX7Rpxjaj0wYe0VOj2.Yuvx05/M5g0WBb0e7sWxFBnLn1KET1Poy', 'sutenekoakira@gmail.com', 1),
(14, NULL, 'Edmund', NULL, 'active', '2018-12-14 23:46:38', '$2a$10$MQcrlYRFcSsL0hbWlYalG.iXK7waiycZdehipTdOlzLF9mqUPTavC', 'Ed@gmail.com', 0),
(16, NULL, 'mcusey', NULL, 'active', '2018-12-15 04:41:19', '$2a$10$hOviDp2CKud76Wd3QpTfz.J9XxfXiIFXGKwi1PIZSpgwNtI2Wvw.W', 'mcusey@verizon.net', 0),
(17, NULL, 'tiffMan', NULL, 'active', '2018-12-17 18:15:52', '$2a$10$C7tScJ7Q5eiLpNgu4QpdROtCL8ziN2XIn20torlK/PJPCYVx5qUDy', 'tiffMan@mail.com', 0),
(31, NULL, 'Andy', NULL, 'active', '2018-12-17 22:49:11', '$2a$10$qeminoxrDgWr/1BAw5cYpOlMj4iadgQ/bFgJ1jOcOlYaXs7XStb7K', 'aong93@gmail.com', 0),
(43, NULL, 'tiffMan1', NULL, 'active', '2018-12-18 01:04:36', '$2a$10$ywxsuxMhrilOX0vhzOzHSOffaXK.iJNQzuxIyRRazC./4mif46EdW', 'tiffMan1@mail.com', 0),
(45, NULL, 'test', NULL, 'active', '2018-12-19 08:03:49', '$2a$10$YEh6jt7tcoUKDhvAwxKMDueXCXHfCetlU5zsmJfiv/TXMTiW/z3KG', 'tests@gmail.com', 0),
(63, NULL, 'shamma', '/avatars/frog.png', 'active', '2018-12-21 15:24:38', '$2a$10$X.Dus5Bi9lsu7vHaGeMdDOussqggG0QpEOxYo8983fK6JSiO5Oi0i', 'shamma@mail.com', 0),
(64, NULL, 'shalom', '/avatars/crab.png', 'active', '2018-12-21 15:25:18', '$2a$10$W5ORcxPcEFp5c/hRcKrUXuxwB7ooCsM8AElxxkGDuP91veT.VQnri', 'shalom@mail.com', 0),
(65, NULL, 'tiffLovesFish', '/avatars/fish.png', 'active', '2018-12-21 15:36:46', '$2a$10$3iVNFVYRmkNXM4yhCekDTecPupt4hm08PIlZB3z6U4xKhln/XLeUS', 'tifflovesfish@mail.com', 0),
(83, NULL, 'edmundd', '/avatars/crab.png', 'active', '2018-12-21 20:39:30', '$2a$10$PEr4AqE5nsQa4HgovlL5NOgGPY0/O472EDWOXCcZJSp7ecO71LZ.y', 'edmund@yahoo.com', 0),
(84, NULL, 'fish1', '/avatars/fish.png', 'active', '2018-12-21 20:40:09', '$2a$10$sEbdId7DtjHXnbubt0tRHO2nh5HRSblHgEbOvUuO8Zlhj9zwxoJsi', 'fish1@mail.com', 0),
(85, NULL, 'main', '/avatars/crab.png', 'active', '2018-12-21 20:41:48', '$2a$10$bswak3ZPm7KsSo73SzcJpeATUvlAeWs7mcjoxoHSF9BJ7TYf8MEs2', 'main@mail.com', 0),
(86, NULL, 'arthur', '/avatars/crab.png', 'active', '2018-12-21 20:46:11', '$2a$10$DM5MKTOFxSyjfhM12Nktr.Einov/Zez14s2N3uyRmtkeayZVCuZzy', 'arthur@mail.com', 0),
(87, NULL, 'arthur2', '/avatars/crab.png', 'active', '2019-01-02 22:58:47', '$2a$10$rZlvxpYHhBmVu5PF74oOKeh2actfnt6q/UosxhzYr0N.xZTJtZd5G', 'arthur2@mail.com', 0),
(88, NULL, 'crabby', '/avatars/crab.png', 'active', '2018-12-21 20:49:17', '$2a$10$p0MztH2W4u8vKpyAPMbmruh87wCS4NuhmmoXfbARPq./xrsFUtDS.', 'crabby@mail.com', 0),
(89, NULL, 'turtle', '/avatars/turtle.png', 'active', '2018-12-21 20:50:48', '$2a$10$3z/P3WA/WAhX.bR9KQEirut6EA0LbBl.0rAltHfK9GH0Szo3xvFli', 'turtle@mail.com', 0),
(90, NULL, 'reindeer', '/avatars/reindeer.png', 'active', '2018-12-21 20:53:39', '$2a$10$//PVWAl9k3K9e8wC4kuD5.hn8xBUuP13nUEBDsU.UT614xhvcV..C', 'reindeer@mail.com', 0),
(91, NULL, 'fishy1', '/avatars/crab.png', 'active', '2018-12-21 20:55:50', '$2a$10$Ufq8jCTbN14Ilc4F8b6nKOE85FAZ80q7bxgJe67V3Ujpfbvsde8.q', 'fishy1@mail.com', 0),
(92, NULL, 'fishy2', '/avatars/crab.png', 'active', '2018-12-21 20:56:10', '$2a$10$UGTi7kISrO.wAnW5qjqm5uuEBG5BosC8C.x.AbATdMeDWCcBPns/.', 'fishy2@mail.com', 0),
(93, NULL, 'fishy3', '/avatars/crab.png', 'active', '2018-12-21 20:56:27', '$2a$10$Tij3Hpvain2eCEsGOSDvEuel2tNBQR5fpWlwnGHktpb7J98q7EkUu', 'fishy3@mail.com', 0),
(94, NULL, 'crabhammer', '/avatars/crab.png', 'active', '2018-12-21 21:09:09', '$2a$10$oUN3SgWpVwK0EvBti5wEzOEJfMaDlZZGuonZMI1aZGGnGk4eAnuzu', 'crabhammer@mail.com', 0),
(95, NULL, 'brandondestroyer', '/avatars/fish.png', 'active', '2018-12-26 22:04:10', '$2a$10$rhyNMrDmS74mhA/GTv4ddeFopqdasZ29VUwPB6UFOBr52zEyk1tkG', 'vienna@gmail.com', 0),
(96, NULL, 'viennatran', '/avatars/crab.png', 'active', '2018-12-27 01:45:51', '$2a$10$WD.QFVEH.DwcKzlZW.r87uoSFFE2ddbAoIMSTVDuMPsyevAQvZKny', 'vtran@mail.com', 0),
(97, NULL, 'breathics', '/avatars/crab.png', 'active', '2018-12-28 23:43:17', '$2a$10$yLRbHT3jOBAcAsgzDrdtz.BKrsXWycWLfqUJTo9KOeRB7UWNoCZBq', 'andyong@learningfuze.com', 0),
(98, NULL, 'albert', '/avatars/crab.png', 'active', '2018-12-29 01:59:37', '$2a$10$FuOWYw5RjGlZK1DBq2BYde08sRe0amQUcwn338T/QJe8Ok2XZV.Hm', 'albert.terri@gmail.com', 0),
(99, NULL, 'brandonpark', '/avatars/fish.png', 'active', '2019-02-11 08:01:59', '$2a$10$rC9FhSKZNachYCuW7ARyHurO2RcJwhfGg9oS2bkIBhdvjmoAje2AO', 'brandonpark206@gmail.com', 1),
(100, NULL, 'miamia', '/avatars/turtle.png', 'active', '2019-01-02 21:58:21', '$2a$10$JwnF/Uwcq7xe3HpX8xAC2.E9CKEiT.Z8Spd.770gXkgyubcZVFj9m', 'miat@email.com', 0),
(101, NULL, 'tass', '/avatars/crab.png', 'active', '2019-01-05 05:13:13', '$2a$10$t1tzf3uKiScgMf/IGCMsHO/xLOdB0z.cnZITfh0a/G1LzMOtNiEmG', 'apple@gmail.com', 0),
(102, NULL, 'rabbit', '/avatars/rabbit.png', 'active', '2019-01-08 20:51:33', '$2a$10$y2aSSBF/nVUDMeOgepzm/e6zbgSOfNFzZ9WWyVODx.hMVo48PmmVa', 'rabbit@mail.com', 0),
(103, NULL, 'andyong1', '/avatars/reindeer.png', 'active', '2019-01-08 20:27:18', '$2a$10$VSU87HyC6jCGYg5jtEsGfukQWSPwAKPK8GRfQkx.vPr6yeNqWR.3W', 'andy@gmail.com', 0),
(104, NULL, 'vienna', '/avatars/fish.png', 'active', '2019-01-08 21:00:05', '$2a$10$Z4YkwTyvmebS8k5FckYXe.eukm.BlH0EZrcs6IgMLmPtJztz4dNi6', 'viennatestemail@email.com', 1),
(105, NULL, 'fishman', '/avatars/fish.png', 'active', '2019-01-08 21:25:26', '$2a$10$Zks4agbHIFyLkDCMvQTQ5OmaC5h0Ki9bgO3qgnCNEM2I/4Gr/m7h6', 'fishman@gmail.com', 1),
(106, NULL, 'viennaltran', '/avatars/rabbit.png', 'active', '2019-01-09 00:17:06', '$2a$10$LfuDzOlIXnU6I9vxc13vt.mpgx1ytiQQf8Eh8db93b4/QxbgRN2XO', 'test@email.com', 1),
(107, NULL, 'matt', '/avatars/crab.png', 'active', '2019-01-09 23:21:05', '$2a$10$KSxMBc5rXnh.LTgM1IwZKu7n/t4WYE5djAhG6it9tBoXBk0NKjNb6', 'matt@email.com', 0),
(108, NULL, 'cute_rabbit', '/avatars/rabbit.png', 'active', '2019-01-14 19:55:11', '$2a$10$nAKFp.NhYan6msFJK0pxgO5MQJNpR4dEtJma/Z1HlvU2d9RdsfxP.', 'rabbit@email.com', 0),
(109, NULL, 'andyong2', '/avatars/crab.png', 'active', '2019-01-15 20:27:55', '$2a$10$znkdVrKS9kfYVZ/duhl6cebHCwZ77NbvXFqr44B9BmJJ.sCAbIB3m', 'andy2@gmail.com', 1),
(110, NULL, 'Rain', NULL, 'active', '2019-01-16 03:02:56', '$2a$10$u0lZjr86L4iksdF/5cjlZeHAIKpXLmk5hWwpGNzg14g.QUHhZ24pq', 'Rain@gmail.com', 0),
(111, NULL, 'lilly', '/avatars/crab.png', 'active', '2019-01-18 00:52:29', '$2a$10$udEjB1ewSryVyw5kVF1QXODnDM6Leu2U7hf1iS0RRR.kJHYfPY8bm', 'lilly@gmail.com', 1),
(112, NULL, 'turtleturtle', NULL, 'active', '2019-01-18 21:43:34', '$2a$10$FtjegyjS5PFG1J2CqIXpj./qXXf0iEi4xYNXPacrJzLWgcylmRDO2', 'abcd1234@email.com', 0),
(113, NULL, 'fdsafsda', NULL, 'active', '2019-01-18 21:45:09', '$2a$10$M/mRnfOi93BXYG4YiC5LYevFs6LV9GU6460ETlEMK1Mflw6TRhPGS', 'fdsafdsa@email.com', 0),
(114, NULL, 'asdf', NULL, 'active', '2019-01-18 21:52:18', '$2a$10$XkxUULggt70gHrcqd49dP.fYzqmrE5aS5WIZSH9pB67haExcwI0kW', 'fdsa@email.com', 0),
(115, NULL, 'andy3', '/avatars/crab.png', 'active', '2019-01-18 22:46:21', '$2a$10$Vh5qpMzjjvLC8LRXAlhyW.UdQ86MaTR2oI0Uv3usGAcjQp0OSz1Y.', 'andy3@gmail.com', 0),
(116, NULL, 'andy4', '/avatars/reindeer.png', 'active', '2019-01-18 22:53:31', '$2a$10$Y8ebt0n.JLV4kWIig3xZdehWy0HdTZmPxhDzVdjyp32ljfmMDkO.S', 'andy4@gmail.com', 1),
(117, NULL, 'viviviv', '/avatars/crab.png', 'active', '2019-01-18 23:49:51', '$2a$10$KN6oU1KhsgZDQNfwi0m9Dean7Jj7NDn.SntJ.csMnhTa2Fxy7daHq', 'vienna@email.com', 0),
(118, NULL, 'banana', '/avatars/crab.png', 'active', '2019-01-19 01:42:20', '$2a$10$BDoXVasGbkhGeBZjVc0tMe4qg3J2cPcB0q8Ebmz/gKTEs.10klDEm', 'banana@gmail.com', 0),
(119, NULL, 'andy5', '/avatars/frog.png', 'active', '2019-01-22 19:36:17', '$2a$10$iG0IaGvx0opdVPJ.hGPNjOz62ziq2a7IRvhcxH7JKqYYnLd4VV5UK', 'andy5@gmail.com', 0),
(120, NULL, 'andy6', '/avatars/reindeer.png', 'active', '2019-01-22 20:02:38', '$2a$10$tCenNbpvcBgJCvj5VC7L2O5H9Ao25VHfWBCz3zEbau1ek3FwlHC3K', 'andy6@gmail.com', 1),
(121, NULL, 'cybae0804', '/avatars/fish.png', 'active', '2019-01-23 00:56:00', '$2a$10$VxYz1R7HWWGB38/JwJw1dOLsV8A/PiM5m.ZQj87MDUk75oGbGcB8O', 'cybae0804@gmail.com', 1),
(122, NULL, 'aliceKin', '/avatars/reindeer.png', 'active', '2019-01-25 02:36:06', '$2a$10$h8QFcL5q9aEYlH6KJqN36u7fSPRpbjFf.DKux5IUODK78sAFS7xhC', 'floatinsky00@gmail.com', 0),
(123, NULL, 'anon1', '/avatars/turtle.png', 'active', '2019-01-26 03:35:36', '$2a$10$vAuaBOiz7GH0XDotzvc8eeYu6HtfWvzZeTiLo7.AWsLpgW.y4S0rW', 'anon@gmail.com', 0),
(124, NULL, 'anon2', '/avatars/frog.png', 'active', '2019-01-26 03:38:17', '$2a$10$2ckNuw1eFFa7lH/XD.31j.VdmLvUIatjhl3LAEqKpKiBLVUUfId8O', 'anon2@gmail.com', 0),
(125, NULL, 'anon3', '/avatars/rabbit.png', 'active', '2019-01-26 03:39:56', '$2a$10$.R7BrYniyNVbbsS29YwOS.bknWYKUsmD1RAOvtub2.dIjpIrmPxKi', 'anon3@gmail.com', 0),
(126, NULL, 'janedoe', '/avatars/fish.png', 'active', '2019-01-26 04:04:02', '$2a$10$cT0EkYBt6dizQPtEN7QdGuoNiLe7rb73ACoGWl9CjgWVRNgDfNzcy', 'janedoe@yahoo.com', 0),
(127, NULL, 'johnsmith', '/avatars/crab.png', 'active', '2019-01-26 04:10:42', '$2a$10$MVrLvesHOd0UPINF3tpOeeJopI3dGwRrXxwpBpSLc1MjliG28F5kS', 'johnsmith@gmail.com', 1),
(128, NULL, 'brandonsmith', '/avatars/crab.png', 'active', '2019-01-26 04:18:10', '$2a$10$VwGWsWo5dgkSfcG4YXDhpOsv5bQjtKW0U.BitOSfOhNuziee20CHO', 'brandonsmith@yahoo.com', 1),
(129, NULL, 'Patriciayeu', '/avatars/crab.png', 'active', '2019-01-27 03:41:04', '$2a$10$eoC0VSfcMeSqbMuIkh7qd.iarmWJTXon0Xe/4BiouugwPIT/x.szy', 'patriciayeu@yahoo.com', 1),
(130, NULL, 'tim1', '/avatars/rabbit.png', 'active', '2019-01-28 20:23:34', '$2a$10$jFON8yY4KI4mKaBMB.Eb5.extGuagIyeBb6Km6.vkrtl6OtoPC/IC', 'tim1@gmail.com', 1),
(131, NULL, 'reindeerboy', '/avatars/reindeer.png', 'active', '2019-01-28 22:24:40', '$2a$10$2k1nuORDdwn15xl0uzDzwuJE7V.nNXC3sw0DjQGaIBfzowJ4IXMQG', 'santasfavorite@gmail.com', 0),
(132, NULL, 'aaaaab', '/avatars/crab.png', 'active', '2019-01-28 22:59:56', '$2a$10$Bs2KJYA7ZJC47jY8FZtAdOrRIxNAfoqLaXPKKFEn0K/nIE5rtKO/a', 'aaa@gmail.com', 0),
(133, NULL, 'default', '/avatars/crab.png', 'active', '2019-01-28 23:13:01', '$2a$10$NTKUeJZcd9CGH9oLHx1RwebBCQhvBP0umR/pIq9U.MEBPgbvGi/3e', 'default@gmail.com', 0),
(134, NULL, 'user1', '/avatars/default_avatar.png', 'active', '2019-01-31 20:12:42', '$2a$10$80ilIP2KxBoBSRMHWYLtGOHnl1ZZp2CeOJXLrt2ndo/1Hfniqjeky', 'user1@gmail.com', 0),
(135, NULL, 'janesmith', '/avatars/default_avatar.png', 'active', '2019-02-07 20:07:46', '$2a$10$PlxyjbEOnkFGuXkDs3ld0uKdaNT2TyUSvd4m8Kv9EpckSCt04kJxu', 'janesmith@yahoo.com', 0),
(136, NULL, 'example', '/avatars/rabbit.png', 'active', '2019-02-13 02:05:02', '$2a$10$vZ584W8vY46E/ef.k6iGLecVdylrZZ9FYBSNbX3ASrCj3G24DOcCa', 'example@example.com', 1),
(137, NULL, 'John Smith', '/avatars/turtle.png', 'active', '2019-02-15 01:20:24', '$2a$10$1vVOBIHFenzNdCsxs3arB.lqy6e9SQcXrZ2VeQACC8JjM7C5DpNU6', 'example@gmail.com', 1),
(138, NULL, 'michael', '/avatars/default_avatar.png', 'active', '2019-02-19 00:22:27', '$2a$10$2nhnyguhi71233/fNM7xiOe1o6cz1ZBUaO564QrIDQKFcmS16n7F2', 'michaele@gmail.com', 0),
(139, NULL, 'abcdefg', '/avatars/crab.png', 'active', '2019-02-21 08:23:58', '$2a$10$Jj.7AYEDcWG334WOguU83OAW7hKVRERyNH3bPpKq8MLcPaEHuBGY6', 'abcdefg@hotmail.com', 0),
(140, NULL, 'dazcha76', '/avatars/turtle.png', 'active', '2019-02-24 05:21:12', '$2a$10$haiQVUFzos2Ejwwtbj84WeM9AUCmyj2ozYxWjviRDMA/1fMAqd8Em', 'dazcha@hotmail.com', 0),
(141, NULL, 'dpaschal', '/avatars/rabbit.png', 'active', '2019-02-24 16:05:11', '$2a$10$tT0XjiUDmUwmurV2yfC8K.Gk7SMrMBykj5XZ1aj.1lo4B5iwszgcC', 'daniel.paschal@learningfuze.com', 1),
(142, NULL, 'asdfdsa', '/avatars/default_avatar.png', 'active', '2019-02-24 16:56:50', '$2a$10$OWlYYsDa/LOJD6ebqQcmsO52oiEE3ZVdZ9H4iy1FNVivitv0KudQC', 'asdf@gmail.com', 1),
(143, NULL, 'Joe', '/avatars/fish.png', 'active', '2019-02-28 00:22:43', '$2a$10$DXQYEWu3QCrqall9yFs1iuPbEWyUq8bbCq3PFJ.DIDuCzDTw5xibm', 'joseph.rodriguez@experian.com', 1),
(144, NULL, 'Qmtruong', '/avatars/crab.png', 'active', '2019-03-05 15:45:11', '$2a$10$y5YdzF1fWyIC8A6jyLVGPeZiCTbVpBeENcwCh/ur.3Ih4wH/AtXuy', 'qmtruong2@gmail.com', 0),
(145, NULL, 'Erinin', '/avatars/rabbit.png', 'active', '2019-03-06 23:35:42', '$2a$10$2BPGqT00TLtmMIvdFC581eNmRsAhRUABm.tEM1WxoYrD1Q5raOMhm', 'erinmtait@gmail.com', 1),
(146, NULL, 'Calberk', '/avatars/fish.png', 'active', '2019-03-07 23:59:31', '$2a$10$GB2YVbHMx1xK5.dnXfNfrOF4OO5vbY5nOtrxt9h6zfes31Ow5vyYa', 'park.edmund@gmaul.com', 1),
(147, NULL, 'Calbear', '/avatars/frog.png', 'active', '2019-03-08 00:03:32', '$2a$10$GGzmUHztjwKFWbTW//xcq.8Ww7fKwsVWM75064w34XOdjo4nG00qC', 'Cal@gmail.com', 0),
(148, NULL, 'viennavienna', '/avatars/crab.png', 'active', '2019-03-08 00:54:59', '$2a$10$upQSDQf4tvuyKZ0s8DEvfebaenmnQlHglAO4QsSf2GJqarLrIWLmO', 'example@test.com', 1),
(149, NULL, 'kate', '/avatars/rabbit.png', 'active', '2019-04-02 23:55:40', '$2a$10$gV7my4tF7xQ3oLKvDTV39uHDThoL5q1MG4RK/Opcuo2KM3zdqRg2a', 'rudhi1009@gmail.com', 0),
(150, NULL, 'Tester', '/avatars/default_avatar.png', 'active', '2019-04-04 20:07:05', '$2a$10$dR69HGz7QF9/mSzth30VAexMavoTjLGFf3xMmcO4Y/kJ1hZs9JsxK', 'test@gmail.com', 0),
(151, NULL, 'uncosung', '/avatars/default_avatar.png', 'active', '2019-04-09 01:26:10', '$2a$10$5kOa78CCSTdsTxv7BEKkVOywI5UHuNvgPDj6ngJKhVIOGXDzy/J6i', 'eric.k.sung@gmail.com', 0),
(152, NULL, 'jen-icl', '/avatars/crab.png', 'active', '2019-04-09 03:24:40', '$2a$10$WQsxY2zv4dwVjE2DD76BVOxVPqVeOqu4ZRHX6bk6v2GKbWBqGhbXq', 'jenniferlai.81@gmail.com', 0),
(153, NULL, 'jkalay', '/avatars/turtle.png', 'active', '2019-04-11 16:06:03', '$2a$10$lP2baI9xAtisQsHrWEYex.3TPOuW9Ryk.u3LzmoK0vbgph/Tbs.Xy', 'jkalay@gmail.com', 1),
(154, NULL, 'asdf11', '/avatars/default_avatar.png', 'active', '2019-04-17 16:50:56', '$2a$10$EbgK1MpSSKslBlQDyY9MBOZ/TDR4h5GXF33Im8NqeutK39q8LKP1O', 'asdf@asdf.com', 0),
(155, NULL, 'RJF', '/avatars/default_avatar.png', 'active', '2019-04-18 21:08:45', '$2a$10$68tdXRTOWGRkcZnLMj4GTeYk4XFZinUl01TBIkZ1/5xZrnxTFmqh.', 'rfortier@doctorgenius.com', 1),
(156, NULL, ' test_username', '/avatars/rabbit.png', 'active', '2019-05-03 20:50:20', '$2a$10$kbWG1TW5QOTDvlPL0xelvOEsPKQ3uzPxnjRhCRrIu8FYvKMOrNnQm', 'test_email@email.com', 0),
(157, NULL, 'paulanoone', '/avatars/reindeer.png', 'active', '2019-05-09 18:19:17', '$2a$10$yhPGuX9Xig5n7CSNQiTm9umsNAa5AcUIeyUn04bUDIizMiwOBN5Ke', 'Paulanoone@icloud.com', 0),
(158, NULL, 'cgg16', '/avatars/default_avatar.png', 'active', '2019-05-13 19:58:20', '$2a$10$MMYxLepa1Vyctflb0yNvLeNMyboRhFswOxImYJy6SMK72DeWumEwC', 'chrisgustavsson1@gmail.com', 0),
(159, NULL, 'fdsfsd', '/avatars/crab.png', 'active', '2019-06-13 17:31:39', '$2a$10$krUs3yspwrl0oWzzqy7JiOXAGQUGo1GRBlAwG7l19KgbZY5HGoJYW', 'fdsf@mail.com', 1),
(160, NULL, 'katiedunngb', '/avatars/default_avatar.png', 'active', '2019-06-15 20:42:53', '$2a$10$iwoMYFIDKFD.x9ZG82PsHuGLUkaLS.kdAt.pAlJIwOguW1ygHlYJi', 'katiedunngb@gmail.com', 0),
(161, NULL, 'liamgeraghty', '/avatars/default_avatar.png', 'active', '2019-07-06 01:50:07', '$2a$10$DUjq7XO3siIQcDlgyNa4Je7zmegu051lErzMI7Npq1Hf6IZnmkSDW', 'liamgeraghty@hotmail.com', 0),
(162, NULL, 'hihi', '/avatars/default_avatar.png', 'active', '2019-07-07 19:17:13', '$2a$10$gP/UvdjMINHEsiT8/pk9COtAngtnV1bZPbA3ahjdQvCGj1SyRTlaG', 'hihi@gmail.com', 1),
(163, NULL, 'alexvong', '/avatars/crocodile.png', 'active', '2019-08-12 14:06:40', '$2a$10$rZc0vamRjY53zMs3VKGev.sDW.hcxSnETiTkhNhWGag5j27R4eFYy', 'avong003@gmail.com', 0),
(164, NULL, 'Sue', '/avatars/crocodile.png', 'active', '2019-09-09 20:14:44', '$2a$10$.jNLjggHAWgnb/ySOexfSeCweJZcw8U3k0VZKG5P3.bq4djob6TUK', 'sue665@gmail.com', 1),
(165, NULL, 'MICRIVA', '/avatars/crab.png', 'active', '2019-09-25 13:23:03', '$2a$10$C5h4gSk5Qs.lRsvjlhJZUu564FAq8FnT1n/Ny7mVez7PwwuykynMq', 'rico_italy@journalist.com', 1),
(166, NULL, 'Mcdoosle94', '/avatars/default_avatar.png', 'active', '2019-09-28 04:04:35', '$2a$10$hd5BP4s0brk2s1RSAwjh1OJ7.K495Du9ssHFnXLu7p1IOVxLRrLyi', 'mackenzie.jackman94@yahoo.com', 0),
(167, NULL, 'wemake79', '/avatars/turtle.png', 'active', '2019-11-14 09:13:43', '$2a$10$lCIGinVNh53/RjbtoeHi1uaYdsKxJ7VKCV7bR5saeNbfCQqXh2qkG', 'wemake79@gmail.com', 1);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `cards`
--
ALTER TABLE `cards`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `topicID` (`topicID`);

--
-- Indexes for table `sets`
--
ALTER TABLE `sets`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `userID` (`userID`);

--
-- Indexes for table `topics`
--
ALTER TABLE `topics`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `setID` (`setID`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`ID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `cards`
--
ALTER TABLE `cards`
  MODIFY `ID` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=836;
--
-- AUTO_INCREMENT for table `sets`
--
ALTER TABLE `sets`
  MODIFY `ID` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=586;
--
-- AUTO_INCREMENT for table `topics`
--
ALTER TABLE `topics`
  MODIFY `ID` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=541;
--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `ID` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=168;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `cards`
--
ALTER TABLE `cards`
  ADD CONSTRAINT `cards_ibfk_1` FOREIGN KEY (`topicID`) REFERENCES `topics` (`ID`) ON DELETE CASCADE;

--
-- Constraints for table `sets`
--
ALTER TABLE `sets`
  ADD CONSTRAINT `sets_ibfk_1` FOREIGN KEY (`userID`) REFERENCES `users` (`ID`) ON DELETE CASCADE;

--
-- Constraints for table `topics`
--
ALTER TABLE `topics`
  ADD CONSTRAINT `topics_ibfk_1` FOREIGN KEY (`setID`) REFERENCES `sets` (`ID`) ON DELETE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
